# bot.py
import asyncio
from datetime import datetime, timedelta
import os
import time
from aiogram import Bot, Dispatcher
from aiogram.fsm.storage.memory import MemoryStorage
from database import Database
from handlers import common, admin, executor
from dotenv import load_dotenv

from utils import send_channel_message
os.environ['TZ'] = 'Etc/GMT-5'
time.tzset() # –û–±–Ω–æ–≤–ª—è–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ —Ç–∞–π–º–∑–æ–Ω–µ



load_dotenv()

API_TOKEN_TEST = os.getenv("API_TOKEN_TEST")  # Get your token from .env
API_TOKEN_PROD = os.getenv("API_TOKEN_PROD")
DB_PATH = "database/database.db"
instance = Bot(token=API_TOKEN_PROD)  # Create an instance of the Bot class
CHANNEL_ID = os.getenv("CHANNEL_ID")



async def check_deadlines(bot: Bot, db: Database):
    """–ü—Ä–æ–≤–µ—Ä—è–µ—Ç –¥–µ–¥–ª–∞–π–Ω—ã –∑–∞–¥–∞—á –∏ –æ—Ç–ø—Ä–∞–≤–ª—è–µ—Ç —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è."""
    while True:
        tasks = db.get_all_tasks()
        for task in tasks:
            if task['status'] == 'pending' or task['status'] == 'is_on_work':
                deadline = datetime.fromtimestamp(task['deadline'])
                now = datetime.now()
                time_left = deadline - now
                print(f"{deadline} - {now} = {time_left} for task: {task['title']}")

                if time_left <= timedelta(hours=24) and time_left > timedelta(hours=2):
                    notification_type = "1day"
                    if task['assigned_to']:
                        for user_id in task['assigned_to'].split(','):
                            user_id = int(user_id)
                            if not db.check_task_notification(task['id'], user_id, task['deadline'], notification_type):
                                try:
                                    await bot.send_message(
                                        chat_id=user_id,
                                        text=(
                                            f"‚è∞ <b>–ù–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ:</b>\n"
                                            f"–£ –≤–∞—Å –æ—Å—Ç–∞–ª–æ—Å—å –º–µ–Ω—å—à–µ <b>1 –¥–Ω—è</b> –¥–æ –¥–µ–¥–ª–∞–π–Ω–∞ –∑–∞–¥–∞—á–∏:\n"
                                            f"üîñ <b>–ù–∞–∑–≤–∞–Ω–∏–µ:</b> {task['title']}\n"
                                        ),
                                        parse_mode="HTML"
                                    )
                                    print(f"–û—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é {user_id} –ø–æ –∑–∞–¥–∞—á–µ {task['title']} –∑–∞ 1 –¥–µ–Ω—å")
                                    db.add_task_notification(task['id'], user_id, task['deadline'], notification_type)

                                except Exception as e:
                                    print(f"–ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–ø—Ä–∞–≤–∏—Ç—å —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é {user_id}: {e}")
                elif time_left <= timedelta(hours=2) and time_left > timedelta(minutes=30):
                    notification_type = "2hours"
                    if task['assigned_to']:
                        for user_id in task['assigned_to'].split(','):
                            user_id = int(user_id)
                            if not db.check_task_notification(task['id'], user_id, task['deadline'], notification_type):
                                try:
                                    await bot.send_message(
                                        chat_id=user_id,
                                        text=(
                                            f"‚è∞ <b>–ù–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ:</b>\n"
                                            f"–£ –≤–∞—Å –æ—Å—Ç–∞–ª–æ—Å—å –º–µ–Ω—å—à–µ <b>2 —á–∞—Å–æ–≤</b> –¥–æ –¥–µ–¥–ª–∞–π–Ω–∞ –∑–∞–¥–∞—á–∏:\n"
                                            f"üîñ <b>–ù–∞–∑–≤–∞–Ω–∏–µ:</b> {task['title']}\n"
                                        ),
                                        parse_mode="HTML"
                                    )
                                    print(f"–û—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é {user_id} –ø–æ –∑–∞–¥–∞—á–µ {task['title']} –∑–∞ 2 —á–∞—Å–∞")
                                    db.add_task_notification(task['id'], user_id, task['deadline'], notification_type)

                                except Exception as e:
                                    print(f"–ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–ø—Ä–∞–≤–∏—Ç—å —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é {user_id}: {e}")
                elif time_left <= timedelta(minutes=30) and time_left > timedelta(minutes=0):
                    notification_type = "30min"
                    if task['assigned_to']:
                        for user_id in task['assigned_to'].split(','):
                            user_id = int(user_id)
                            if not db.check_task_notification(task['id'], user_id, task['deadline'], notification_type):
                                try:
                                    await bot.send_message(
                                        chat_id=user_id,
                                        text=(
                                            f"‚è∞ <b>–ù–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ:</b>\n"
                                            f"–£ –≤–∞—Å –æ—Å—Ç–∞–ª–æ—Å—å –º–µ–Ω—å—à–µ <b>30 –º–∏–Ω—É—Ç</b> –¥–æ –¥–µ–¥–ª–∞–π–Ω–∞ –∑–∞–¥–∞—á–∏:\n"
                                            f"üîñ <b>–ù–∞–∑–≤–∞–Ω–∏–µ:</b> {task['title']}\n"
                                        ),
                                        parse_mode="HTML"
                                    )
                                    print(f"–û—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é {user_id} –ø–æ –∑–∞–¥–∞—á–µ {task['title']} –∑–∞ 30 –º–∏–Ω—É—Ç")
                                    db.add_task_notification(task['id'], user_id, task['deadline'], notification_type)
                                except Exception as e:
                                    print(f"–ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–ø—Ä–∞–≤–∏—Ç—å —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é {user_id}: {e}")
        await asyncio.sleep(90)  # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∫–∞–∂–¥—É—é –º–∏–Ω—É—Ç—É
        print("–ü—Ä–æ–≤–µ—Ä–∫–∞ –¥–µ–¥–ª–∞–π–Ω–æ–≤...")

async def reset_scores_yearly(bot: Bot, db: Database):
    """–û–±–Ω—É–ª—è–µ—Ç –±–∞–ª–ª—ã –≤—Å–µ—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –≤ –Ω–∞—á–∞–ª–µ –∫–∞–∂–¥–æ–≥–æ –≥–æ–¥–∞."""
    while True:
        now = datetime.now()
        if now.month <= 2 and now.day == 1 and now.hour == 0 and now.minute == 0:
            db.reset_all_scores()
            print("–ë–∞–ª–ª—ã –≤—Å–µ—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –æ–±–Ω—É–ª–µ–Ω—ã!")
            
            admin_users = db.get_all_users()
            if admin_users:
                for user in admin_users:
                    if user['role'] == '–ê–¥–º–∏–Ω':
                        try:
                            await bot.send_message(
                                chat_id=user['user_id'],
                                text="üéâ <b>–ë–∞–ª–ª—ã –≤—Å–µ—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –æ–±–Ω—É–ª–µ–Ω—ã!</b>\n\n–ù–∞—á–∏–Ω–∞–µ–º –Ω–æ–≤—ã–π –≥–æ–¥ —Å –Ω–æ–≤—ã–º–∏ –±–∞–ª–ª–∞–º–∏!",
                                parse_mode="HTML"
                            )
                        except Exception as e:
                            print(f"–ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–ø—Ä–∞–≤–∏—Ç—å —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –∞–¥–º–∏–Ω—É {user['user_id']}: {e}")
                        break
            
            # –û—Ç–ø—Ä–∞–≤–∫–∞ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –≤ –æ–±—â–∏–π –∫–∞–Ω–∞–ª
            task_text = "üéâ <b>–ë–∞–ª–ª—ã –≤—Å–µ—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –æ–±–Ω—É–ª–µ–Ω—ã!</b>\n\n–ù–∞—á–∏–Ω–∞–µ–º –Ω–æ–≤—ã–π –≥–æ–¥ —Å –Ω–æ–≤—ã–º–∏ –±–∞–ª–ª–∞–º–∏!"
            await send_channel_message(bot, CHANNEL_ID, task_text)

            await asyncio.sleep(60)  # –ñ–¥–µ–º 1 –º–∏–Ω—É—Ç—É, —á—Ç–æ–±—ã –Ω–µ –æ–±–Ω—É–ª—è—Ç—å –±–∞–ª–ª—ã –Ω–µ—Å–∫–æ–ª—å–∫–æ —Ä–∞–∑
        await asyncio.sleep(86400)  # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∫–∞–∂–¥—É—é –º–∏–Ω—É—Ç—É

async def create_default_tariffs(db: Database):
    """–°–æ–∑–¥–∞–µ—Ç –¥–µ—Ñ–æ–ª—Ç–Ω—ã–µ —Ç–∞—Ä–∏—Ñ—ã, –µ—Å–ª–∏ –∏—Ö –Ω–µ—Ç."""
    default_tariffs = [
        {"tariff_name": "day_early", "time_threshold": 86400, "score": 50},
        {"tariff_name": "6hours_early", "time_threshold": 21600, "score": 15},
        {"tariff_name": "hour_early", "time_threshold": 3600, "score": 10},
        {"tariff_name": "15min_late", "time_threshold": 900, "score": 0},
        {"tariff_name": "30min_late", "time_threshold": 1800, "score": 10},
        {"tariff_name": "hour_late", "time_threshold": 3600, "score": 30},
    ]
    for tariff in default_tariffs:
        if not db.get_tariff(tariff['tariff_name']):
            db.create_tariff(tariff['tariff_name'], tariff['time_threshold'], tariff['score'])
            print(f"–°–æ–∑–¥–∞–Ω —Ç–∞—Ä–∏—Ñ: {tariff['tariff_name']}")


async def main():
    dp = Dispatcher(storage=MemoryStorage())
    db = Database(DB_PATH)
    dp.include_router(common.router)
    dp.include_router(admin.router)
    dp.include_router(executor.router)
    dp["db"] = db

    # –°–æ–∑–¥–∞–µ–º –¥–µ—Ñ–æ–ª—Ç–Ω—ã–µ —Ç–∞—Ä–∏—Ñ—ã
    await create_default_tariffs(db)


    # –ó–∞–ø—É—Å–∫–∞–µ–º —Ñ—É–Ω–∫—Ü–∏—é –æ–±–Ω—É–ª–µ–Ω–∏—è –±–∞–ª–ª–æ–≤ –≤ —Ñ–æ–Ω–æ–≤–æ–º —Ä–µ–∂–∏–º–µ
    asyncio.create_task(reset_scores_yearly(instance, db))


    try:
        print("–ë–æ—Ç –∑–∞–ø—É—â–µ–Ω!")
        asyncio.create_task(check_deadlines(instance, db)) # –ó–∞–ø—É—Å–∫–∞–µ–º –ø—Ä–æ–≤–µ—Ä–∫—É –¥–µ–¥–ª–∞–π–Ω–æ–≤
        await dp.start_polling(instance)
    finally:
        await instance.session.close()

if __name__ == "__main__":
    asyncio.run(main())
