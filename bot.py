# bot.py
import asyncio
from datetime import datetime, timedelta
import os
from aiogram import Bot, Dispatcher
from aiogram.fsm.storage.memory import MemoryStorage
from database import Database
from handlers import common, admin, executor
from dotenv import load_dotenv


load_dotenv()

API_TOKEN_TEST = os.getenv("API_TOKEN_TEST")  # Get your token from .env
API_TOKEN_PROD = os.getenv("API_TOKEN_PROD")
DB_PATH = "database.db"
instance = Bot(token=API_TOKEN_PROD)  # Create an instance of the Bot class
CHANNEL_ID = os.getenv("CHANNEL_ID")


async def check_deadlines(bot: Bot, db: Database):
    """–ü—Ä–æ–≤–µ—Ä—è–µ—Ç –¥–µ–¥–ª–∞–π–Ω—ã –∑–∞–¥–∞—á –∏ –æ—Ç–ø—Ä–∞–≤–ª—è–µ—Ç —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è."""
    while True:
        tasks = db.get_all_tasks()
        for task in tasks:
            if task['status'] == 'pending' or task['status'] == 'is_on_work':
                deadline = datetime.fromtimestamp(task['deadline'])
                now = datetime.now()
                time_left = deadline - now

                if time_left <= timedelta(days=1) and time_left > timedelta(hours=24-2):
                    # –£–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –∑–∞ 1 –¥–µ–Ω—å
                    if task['assigned_to']:
                        for user_id in task['assigned_to'].split(','):
                            user_id = int(user_id)
                            try:
                                await bot.send_message(
                                    chat_id=user_id,
                                    text=(
                                        f"‚è∞ <b>–ù–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ:</b>\n"
                                        f"–£ –≤–∞—Å –æ—Å—Ç–∞–ª—Å—è <b>1 –¥–µ–Ω—å</b> –¥–æ –¥–µ–¥–ª–∞–π–Ω–∞ –∑–∞–¥–∞—á–∏:\n"
                                        f"üîñ <b>–ù–∞–∑–≤–∞–Ω–∏–µ:</b> {task['title']}\n"
                                    ),
                                    parse_mode="HTML"
                                )
                            except Exception as e:
                                print(f"–ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–ø—Ä–∞–≤–∏—Ç—å —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é {user_id}: {e}")
                elif time_left <= timedelta(hours=2) and time_left > timedelta(minutes=30):
                     # –£–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –∑–∞ 2 —á–∞—Å–∞
                    if task['assigned_to']:
                        for user_id in task['assigned_to'].split(','):
                            user_id = int(user_id)
                            try:
                                await bot.send_message(
                                    chat_id=user_id,
                                    text=(
                                        f"‚è∞ <b>–ù–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ:</b>\n"
                                        f"–£ –≤–∞—Å –æ—Å—Ç–∞–ª–æ—Å—å <b>2 —á–∞—Å–∞</b> –¥–æ –¥–µ–¥–ª–∞–π–Ω–∞ –∑–∞–¥–∞—á–∏:\n"
                                        f"üîñ <b>–ù–∞–∑–≤–∞–Ω–∏–µ:</b> {task['title']}\n"
                                    ),
                                    parse_mode="HTML"
                                )
                            except Exception as e:
                                print(f"–ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–ø—Ä–∞–≤–∏—Ç—å —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é {user_id}: {e}")
                elif time_left <= timedelta(minutes=30) and time_left > timedelta(minutes=0):
                    # –£–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –∑–∞ 30 –º–∏–Ω—É—Ç
                    if task['assigned_to']:
                        for user_id in task['assigned_to'].split(','):
                            user_id = int(user_id)
                            try:
                                await bot.send_message(
                                    chat_id=user_id,
                                    text=(
                                        f"‚è∞ <b>–ù–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ:</b>\n"
                                        f"–£ –≤–∞—Å –æ—Å—Ç–∞–ª–æ—Å—å <b>30 –º–∏–Ω—É—Ç</b> –¥–æ –¥–µ–¥–ª–∞–π–Ω–∞ –∑–∞–¥–∞—á–∏:\n"
                                        f"üîñ <b>–ù–∞–∑–≤–∞–Ω–∏–µ:</b> {task['title']}\n"
                                    ),
                                    parse_mode="HTML"
                                )
                            except Exception as e:
                                print(f"–ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–ø—Ä–∞–≤–∏—Ç—å —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é {user_id}: {e}")
        await asyncio.sleep(1800)  # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∫–∞–∂–¥—É—é –º–∏–Ω—É—Ç—É



async def main():
    dp = Dispatcher(storage=MemoryStorage())
    db = Database(DB_PATH)
    dp.include_router(common.router)
    dp.include_router(admin.router)
    dp.include_router(executor.router)
    dp["db"] = db


    try:
        print("–ë–æ—Ç –∑–∞–ø—É—â–µ–Ω!")
        asyncio.create_task(check_deadlines(instance, db)) # –ó–∞–ø—É—Å–∫–∞–µ–º –ø—Ä–æ–≤–µ—Ä–∫—É –¥–µ–¥–ª–∞–π–Ω–æ–≤
        await dp.start_polling(instance)
    finally:
        await instance.session.close()

if __name__ == "__main__":
    asyncio.run(main())