from aiogram import Router, F, types
from database import Database
from keyboards.inline import task_executor_keyboard, task_executor_keyboarda
from aiogram.types import CallbackQuery
from aiogram.fsm.state import State, StatesGroup
from aiogram.fsm.context import FSMContext
from aiogram.filters import StateFilter
from aiogram.types import Message, InlineKeyboardButton, InlineKeyboardMarkup



router = Router()

class ReportTaskFSM(StatesGroup):
    task_id = State()
    photo = State()
    report_text = State()

@router.message(F.text == "–ú–æ–∏ –∑–∞–¥–∞—á–∏")
async def my_tasks_handler(message: Message, db: Database):
    """
    –û—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–µ —Å–ø–∏—Å–∫–∞ –∑–∞–¥–∞—á –¥–ª—è –∏—Å–ø–æ–ª–Ω–∏—Ç–µ–ª—è.
    """
    user_id = message.from_user.id
    tasks = db.get_tasks_by_user(user_id)

    if not tasks:
        await message.answer("–£ –≤–∞—Å –ø–æ–∫–∞ –Ω–µ—Ç –∑–∞–¥–∞—á.")
        return

    # –°–æ–∑–¥–∞–µ–º –∫–Ω–æ–ø–∫–∏ –¥–ª—è –∑–∞–¥–∞—á
    task_buttons = [
        InlineKeyboardButton(
            text=f"{task['title'][:25]}...",  # –£–∫–æ—Ä–æ—á–µ–Ω–Ω–æ–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –∑–∞–¥–∞—á–∏
            callback_data=f"view_my_task:{task['id']}"
        )
        for task in tasks if not task['status'] == 'completed' and not task['status'] == 'done'
    ]

    # –§–æ—Ä–º–∏—Ä—É–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É
    keyboard = InlineKeyboardMarkup(
        inline_keyboard=[[button] for button in task_buttons]  # –ö–Ω–æ–ø–∫–∏ –∑–∞–¥–∞—á
    )

    # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–ø–∏—Å–æ–∫ –∑–∞–¥–∞—á
    await message.answer("üìã –í–∞—à–∏ –∑–∞–¥–∞—á–∏:", reply_markup=keyboard)

# @router.message(F.text == "–ú–æ—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞")
# async def statistics_task_handler(message: types.Message, db: Database):
#     """–ó–∞–≤–µ—Ä—à–µ–Ω–∏–µ –∑–∞–¥–∞—á–∏ –∏—Å–ø–æ–ª–Ω–∏—Ç–µ–ª–µ–º."""
#     user_id = message.from_user.id
#     tasks = db.get_my_statistics(user_id)
#     all_tasks =db.get_tasks_by_user(user_id)

#     if tasks:
#         await message.answer(
#             f"–í—Å–µ: {all_tasks}\n"
#             f"–ó–∞–≤–µ—Ä—à–µ–Ω–æ: {tasks['tasks_done']}\n"
#             f"–ü—Ä–æ—Å—Ä–æ—á–µ–Ω–æ: {tasks['tasks_overdue']}\n"     
#         )


@router.callback_query(F.data.startswith("view_my_task:"))
async def view_my_task(callback_query: CallbackQuery, db: Database):
    """
    –û—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–µ –¥–µ—Ç–∞–ª–µ–π –∑–∞–¥–∞—á–∏ –¥–ª—è –∏—Å–ø–æ–ª–Ω–∏—Ç–µ–ª—è.
    """
    task_id = int(callback_query.data.split(":")[1])  # –ü–æ–ª—É—á–∞–µ–º ID –∑–∞–¥–∞—á–∏
    task = db.get_task_by_id(task_id)

    if not task:
        await callback_query.message.edit_text("–ó–∞–¥–∞—á–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞.")
        return

    # –§–æ—Ä–º–∏—Ä—É–µ–º —Ç–µ–∫—Å—Ç –∑–∞–¥–∞—á–∏
    task_text = (
        f"üìã <b>–î–µ—Ç–∞–ª–∏ –∑–∞–¥–∞—á–∏:</b>\n\n"
        f"üîπ <b>–ù–∞–∑–≤–∞–Ω–∏–µ:</b> {task['title']}\n"
        f"üîπ <b>–û–ø–∏—Å–∞–Ω–∏–µ:</b> {task['description']}\n"
        f"üîπ <b>–î–µ–¥–ª–∞–π–Ω:</b> {task['deadline']}\n"
        f"üîπ <b>–°—Ç–∞—Ç—É—Å:</b> {task['status']}"
    )

    # # –ò–Ω–ª–∞–π–Ω-–∫–Ω–æ–ø–∫–∏ –¥–ª—è —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –∑–∞–¥–∞—á–µ–π
    # task_keyboard = InlineKeyboardMarkup(
    #     inline_keyboard=[
    #         [InlineKeyboardButton(text="–ó–∞–≤–µ—Ä—à–∏—Ç—å –∑–∞–¥–∞—á—É", callback_data=f"complete_task:{task_id}")],
    #         [InlineKeyboardButton(text="–ù–∞–∑–∞–¥ –∫ —Å–ø–∏—Å–∫—É", callback_data="back_to_my_tasks")]
    #     ]
    # )

    # –£–¥–∞–ª—è–µ–º —Å—Ç–∞—Ä–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ (—Å–ø–∏—Å–æ–∫ –∑–∞–¥–∞—á) –∏ –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º –Ω–æ–≤–æ–µ —Å –∑–∞–¥–∞—á–µ–π
    await callback_query.message.delete()

    # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –∑–∞–¥–∞—á–µ–π –∏ —Ñ–æ—Ç–æ (–µ—Å–ª–∏ –µ—Å—Ç—å)
    if task["ref_photo"]:
        await callback_query.message.answer_photo(
            photo=task["ref_photo"],  # –ò–¥–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ç–æ—Ä —Ñ–∞–π–ª–∞ —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏–∏
            caption=task_text,
            reply_markup=task_executor_keyboard(task_id) if task['status'] == 'pending' else task_executor_keyboarda(task_id),
            parse_mode="HTML"
        )
    else:
        await callback_query.message.answer(
            task_text,
            reply_markup=task_executor_keyboard(task_id) if task['status'] == 'pending' else task_executor_keyboarda(task_id),
            parse_mode="HTML"
        )


@router.callback_query(F.data == "back_to_my_tasks")
async def back_to_my_tasks(callback_query: CallbackQuery, db: Database):
    """
    –í–æ–∑–≤—Ä–∞—â–µ–Ω–∏–µ –∫ —Å–ø–∏—Å–∫—É –∑–∞–¥–∞—á –∏—Å–ø–æ–ª–Ω–∏—Ç–µ–ª—è.
    """
    user_id = callback_query.from_user.id
    tasks = db.get_tasks_by_user(user_id)

    if not tasks:
        await callback_query.message.edit_text("–£ –≤–∞—Å –ø–æ–∫–∞ –Ω–µ—Ç –∑–∞–¥–∞—á.")
        return

    # –°–æ–∑–¥–∞–µ–º –∫–Ω–æ–ø–∫–∏ –¥–ª—è –∑–∞–¥–∞—á
    task_buttons = [
        InlineKeyboardButton(
            text=f"{task['title'][:25]}...",  # –£–∫–æ—Ä–æ—á–µ–Ω–Ω–æ–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –∑–∞–¥–∞—á–∏
            callback_data=f"view_my_task:{task['id']}"
        )
        for task in tasks if not task['status'] == 'completed' and not task['status'] == 'done'
    ]

    # –§–æ—Ä–º–∏—Ä—É–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É
    keyboard = InlineKeyboardMarkup(
        inline_keyboard=[[button] for button in task_buttons]  # –ö–Ω–æ–ø–∫–∏ –∑–∞–¥–∞—á
    )

    # –£–¥–∞–ª—è–µ–º —Å—Ç–∞—Ä–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –∏ –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–ø–∏—Å–æ–∫ –∑–∞–¥–∞—á
    await callback_query.message.delete()
    await callback_query.message.answer("üìã –í–∞—à–∏ –∑–∞–¥–∞—á–∏:", reply_markup=keyboard)

    
@router.callback_query(F.data.startswith("take_task:"))
async def take_task_handler(callback_query: CallbackQuery):
    db = Database()
    user_id = callback_query.message.from_user.id
    task_id = callback_query.data.split(":")[1]
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å—Ç—å –ª–∏ —É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∑–∞–¥–∞—á–∏ —Å–æ —Å—Ç–∞—Ç—É—Å–æ–º "is_on_work"
    tasks = db.get_tasks_by_user(user_id)
    is_busy = any(task["status"] == "is_on_work" for task in tasks)
    is_done = any(task["status"] == "done" for task in tasks)
    
    if is_busy:
        # –ï—Å–ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —É–∂–µ —Ä–∞–±–æ—Ç–∞–µ—Ç –Ω–∞–¥ –∑–∞–¥–∞—á–µ–π
        await callback_query.message.answer(
            "–í—ã —É–∂–µ —Ä–∞–±–æ—Ç–∞–µ—Ç–µ –Ω–∞–¥ –∑–∞–¥–∞—á–µ–π, –∑–∞–≤–µ—Ä—à–∏—Ç–µ –µ—ë, —á—Ç–æ–±—ã –ø–µ—Ä–µ–π—Ç–∏ –∫ —Å–ª–µ–¥—É—é—â–µ–π!",
            reply_markup=task_executor_keyboard(task_id)
        )
    elif is_done:
        return
    else:
        # –ï—Å–ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —Å–≤–æ–±–æ–¥–µ–Ω, –æ–±–Ω–æ–≤–ª—è–µ–º —Å—Ç–∞—Ç—É—Å –∑–∞–¥–∞—á–∏
        db.update_task_status(task_id, "is_on_work")
        await callback_query.message.edit_reply_markup(
            reply_markup=task_executor_keyboarda(task_id)
        )
        await callback_query.message.answer("–í—ã –≤–∑—è–ª–∏—Å—å –∑–∞ –∑–∞–¥–∞—á—É!")

@router.callback_query(F.data == "add_comment")
async def add_comment_handler(callback_query: CallbackQuery):
    db = Database()
    # task_id = callback_query.data.split(":")[1]
    # oldDesc = db.get_task_by_id(task_id)['description']
    await callback_query.message.answer("–í —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–µ.")
    # updateDesc = f'{oldDesc}\n\n{newDesc}'
    # await callback_query.message.answer("–î–æ–±–∞–≤—å—Ç–µ –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π.")

# @router.callback_query(F.data.startswith("complete_task:"), StateFilter(ReportTaskFSM.task_id))
@router.callback_query(F.data.startswith("complete_task:"))
async def complete_task_handler(callback_query: CallbackQuery, state: FSMContext):
    task_id = callback_query.data.split(":")[1]
    await state.update_data(task_id=task_id)  # –°–æ—Ö—Ä–∞–Ω—è–µ–º task_id –≤ —Å–æ—Å—Ç–æ—è–Ω–∏–µ
    print(f"Task ID: {task_id}")
    await callback_query.message.answer("–û—Ç–ø—Ä–∞–≤—å—Ç–µ —Ñ–æ—Ç–æ –≤—ã–ø–æ–ª–Ω–µ–Ω–Ω–æ–π —Ä–∞–±–æ—Ç—ã:")
    await state.set_state(ReportTaskFSM.photo)

@router.message(F.photo, StateFilter(ReportTaskFSM.photo))
async def handle_report_photo(message: Message, state: FSMContext):
    # –ü–æ–ª—É—á–∞–µ–º —Ñ–æ—Ç–æ
    photo_id = message.photo[-1].file_id  # –ë–µ—Ä–µ–º –Ω–∞–∏–±–æ–ª—å—à–∏–π —Ä–∞–∑–º–µ—Ä —Ñ–æ—Ç–æ
    await state.update_data(photo=photo_id)  # –°–æ—Ö—Ä–∞–Ω—è–µ–º —Ñ–æ—Ç–æ –≤ —Å–æ—Å—Ç–æ—è–Ω–∏–µ
    
    # –ü–µ—Ä–µ—Ö–æ–¥ –Ω–∞ —Å–ª–µ–¥—É—é—â–∏–π —à–∞–≥
    await message.answer("–§–æ—Ç–æ –ø—Ä–∏–Ω—è—Ç–æ. –¢–µ–ø–µ—Ä—å –æ—Ç–ø—Ä–∞–≤—å—Ç–µ —Ç–µ–∫—Å—Ç–æ–≤—ã–π –æ—Ç—á–µ—Ç:")
    await state.set_state(ReportTaskFSM.report_text)

@router.message(F.text, StateFilter(ReportTaskFSM.report_text))
async def handle_report_text(message: Message, state: FSMContext, db: Database):
    # –ü–æ–ª—É—á–∞–µ–º —Ç–µ–∫—Å—Ç –æ—Ç—á–µ—Ç–∞
    report_text = message.text

    # –ü–æ–ª—É—á–∞–µ–º —Å–æ—Ö—Ä–∞–Ω–µ–Ω–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ –∏–∑ —Å–æ—Å—Ç–æ—è–Ω–∏—è
    data = await state.get_data()
    task_id = data["task_id"]
    photo_id = data["photo"]

    # –û–±–Ω–æ–≤–ª—è–µ–º –∑–∞–¥–∞—á—É –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö
    db.update_task_report(task_id, report_text, photo_id)
    
    # –ó–∞–≤–µ—Ä—à–∞–µ–º FSM
    await state.clear()
    await message.answer("–û—Ç—á–µ—Ç –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—É. –°–ø–∞—Å–∏–±–æ!")

@router.message(F.text == "–ó–∞–≤–µ—Ä—à–µ–Ω–Ω—ã–µ –∑–∞–¥–∞—á–∏")
async def done_tasks(message: Message, db: Database):

    user_id = message.from_user.id
    tasks = db.get_tasks_by_user(user_id)

    if not tasks:
        await message.answer("–£ –≤–∞—Å –ø–æ–∫–∞ –Ω–µ—Ç –∑–∞–≤–µ—Ä—à–µ–Ω–Ω—ã—Ö –∑–∞–¥–∞—á.")
        return
    
    # –°–æ–∑–¥–∞–µ–º –∫–Ω–æ–ø–∫–∏ –¥–ª—è –∑–∞–¥–∞—á
    task_buttons = [
        InlineKeyboardButton(
            text=f"{task['title'][:25]}...",  # –£–∫–æ—Ä–æ—á–µ–Ω–Ω–æ–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –∑–∞–¥–∞—á–∏
            callback_data=f"view_my_done_task:{task['id']}"
        )
        for task in tasks if task['status'] == 'done' or task['status'] == 'completed'
    ]

    # –§–æ—Ä–º–∏—Ä—É–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É
    keyboard = InlineKeyboardMarkup(
        inline_keyboard=[[button] for button in task_buttons]  # –ö–Ω–æ–ø–∫–∏ –∑–∞–¥–∞—á
    )

    # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–ø–∏—Å–æ–∫ –∑–∞–¥–∞—á
    await message.answer("üìã –í–∞—à–∏ –∑–∞–≤–µ—Ä—à–µ–Ω–Ω—ã–µ –∑–∞–¥–∞—á–∏:", reply_markup=keyboard)
    
@router.callback_query(F.data.startswith("view_my_done_task:"))
async def view_my_done_task(callback_query: CallbackQuery, db: Database):
    """
    –û—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–µ –¥–µ—Ç–∞–ª–µ–π –∑–∞–¥–∞—á–∏ –¥–ª—è –∏—Å–ø–æ–ª–Ω–∏—Ç–µ–ª—è.
    """
    task_id = int(callback_query.data.split(":")[1])  # –ü–æ–ª—É—á–∞–µ–º ID –∑–∞–¥–∞—á–∏
    task = db.get_task_by_id(task_id)

    if not task:
        await callback_query.message.edit_text("–ó–∞–¥–∞—á–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞.")
        return

    # –§–æ—Ä–º–∏—Ä—É–µ–º —Ç–µ–∫—Å—Ç –∑–∞–¥–∞—á–∏
    task_text = (
        f"üìã <b>–î–µ—Ç–∞–ª–∏ –∑–∞–¥–∞—á–∏:</b>\n\n"
        f"üîπ <b>–ù–∞–∑–≤–∞–Ω–∏–µ:</b> {task['title']}\n"
        f"üîπ <b>–û–ø–∏—Å–∞–Ω–∏–µ:</b> {task['description']}\n"
        f"üîπ <b>–î–µ–¥–ª–∞–π–Ω:</b> {task['deadline']}\n"
        f"üîπ <b>–°—Ç–∞—Ç—É—Å:</b> {task['status']}"
    )

    # # –ò–Ω–ª–∞–π–Ω-–∫–Ω–æ–ø–∫–∏ –¥–ª—è —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –∑–∞–¥–∞—á–µ–π
    # task_keyboard = InlineKeyboardMarkup(
    #     inline_keyboard=[
    #         [InlineKeyboardButton(text="–ó–∞–≤–µ—Ä—à–∏—Ç—å –∑–∞–¥–∞—á—É", callback_data=f"complete_task:{task_id}")],
    #         [InlineKeyboardButton(text="–ù–∞–∑–∞–¥ –∫ —Å–ø–∏—Å–∫—É", callback_data="back_to_my_tasks")]
    #     ]
    # )

    # –£–¥–∞–ª—è–µ–º —Å—Ç–∞—Ä–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ (—Å–ø–∏—Å–æ–∫ –∑–∞–¥–∞—á) –∏ –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º –Ω–æ–≤–æ–µ —Å –∑–∞–¥–∞—á–µ–π
    await callback_query.message.delete()

    # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –∑–∞–¥–∞—á–µ–π –∏ —Ñ–æ—Ç–æ (–µ—Å–ª–∏ –µ—Å—Ç—å)
    if task["ref_photo"]:
        await callback_query.message.answer_photo(
            photo=task["ref_photo"],  # –ò–¥–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ç–æ—Ä —Ñ–∞–π–ª–∞ —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏–∏
            caption=task_text,
            # reply_markup=None,
            parse_mode="HTML"
        )
    else:
        await callback_query.message.answer(
            task_text,
            # reply_markup=None,
            parse_mode="HTML"
        )
