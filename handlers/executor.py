# handlers/executor.py
import os
from aiogram import Bot, Router, F, types
from database import Database
from keyboards.inline import task_executor_keyboard, task_executor_keyboarda
from aiogram.types import CallbackQuery
from aiogram.fsm.state import State, StatesGroup
from aiogram.fsm.context import FSMContext
from aiogram.filters import StateFilter
from aiogram.types import Message, InlineKeyboardButton, InlineKeyboardMarkup
from utils import send_channel_message
from dotenv import load_dotenv


router = Router()
load_dotenv()
CHANNEL_ID = os.getenv("CHANNEL_ID")

class ReportTaskFSM(StatesGroup):
    task_id = State()
    photo = State()
    report_text = State()

#–°–æ–∑–¥–∞–µ–º FSM
class AddCommentEFSM(StatesGroup):
    waiting_for_comment = State()
    task_id = State()

# –í admin.py –∏ executor.py (–æ–±—Ä–∞–±–æ—Ç—á–∏–∫ –Ω–∞–∂–∞—Ç–∏—è –Ω–∞ –∫–Ω–æ–ø–∫—É "–î–æ–±–∞–≤–∏—Ç—å –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π")
@router.callback_query(F.data.startswith("add_comment_exec:"))
async def add_comment_handler(callback_query: CallbackQuery, state: FSMContext):
    task_id = int(callback_query.data.split(":")[1])
    await state.update_data(task_id=task_id) # —Å–æ—Ö—Ä–∞–Ω—è–µ–º task_id –≤ FSMContext
    await callback_query.message.answer("–í–≤–µ–¥–∏—Ç–µ —Ç–µ–∫—Å—Ç –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏—è:")
    await state.set_state(AddCommentEFSM.waiting_for_comment)

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –ø–æ–ª—É—á–µ–Ω–∏—è —Ç–µ–∫—Å—Ç–∞ –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏—è (–≤ admin.py –∏ executor.py):
@router.message(F.text, StateFilter(AddCommentEFSM.waiting_for_comment))
async def process_comment(message: Message, state: FSMContext, db: Database):
    comment_text = message.text
    data = await state.get_data()
    task_id = data.get("task_id")

    if task_id:
        db.update_task_comments(task_id, comment_text)
        await message.answer("–ö–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π –¥–æ–±–∞–≤–ª–µ–Ω.")
        await state.clear() # –æ—á–∏—â–∞–µ–º FSM
        # –û–±–Ω–æ–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –∑–∞–¥–∞—á–µ–π, —á—Ç–æ–±—ã –æ—Ç–æ–±—Ä–∞–∑–∏—Ç—å –Ω–æ–≤—ã–π –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π (–Ω—É–∂–Ω–æ –ø–æ–ª—É—á–∏—Ç—å task –∏ —Å—Ñ–æ—Ä–º–∏—Ä–æ–≤–∞—Ç—å —Ç–µ–∫—Å—Ç)
        task = db.get_task_by_id(task_id)
        if task:
            if task['assigned_to']: # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å—Ç—å –ª–∏ –≤–æ–æ–±—â–µ –Ω–∞–∑–Ω–∞—á–µ–Ω–Ω—ã–µ –∏—Å–ø–æ–ª–Ω–∏—Ç–µ–ª–∏
                assigned_users_list = task['assigned_to'].split(",")
                valid_assigned_users = []
                for user_id_str in assigned_users_list:
                    try:
                        user_id = int(user_id_str)
                        user = db.get_user_by_id(user_id)
                        if user:  # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —Å—É—â–µ—Å—Ç–≤—É–µ—Ç –ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –≤ –±–∞–∑–µ
                            valid_assigned_users.append(user['username'])
                    except ValueError:
                        pass

                assigned_users = ", ".join(valid_assigned_users)
            else:
                assigned_users = "–ù–µ –Ω–∞–∑–Ω–∞—á–µ–Ω–æ"
            task_text = (
                f" <b>–î–µ—Ç–∞–ª–∏ –∑–∞–¥–∞—á–∏:</b>\n\n"
                f"<b>–õ–æ–∫–∞—Ü–∏—è:</b> {task['location']}\n"
                f" <b>–ù–∞–∑–≤–∞–Ω–∏–µ:</b> {task['title']}\n"
                f" <b>–°—Ç–æ–∏–º–æ—Å—Ç—å –∑–∞–¥–∞—á–∏:</b> {task['description']}\n"
                f" <b>–î–µ–¥–ª–∞–π–Ω:</b> {task['deadline_formatted']}\n"
                f" <b>–ò—Å–ø–æ–ª–Ω–∏—Ç–µ–ª–∏:</b> {assigned_users}\n"
                f" <b>–°—Ç–∞—Ç—É—Å:</b> {task['status']}\n\n"
                
            )
            if task['comments'] and task['comments'] != '_': # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å—Ç—å –ª–∏ –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–∏
                formatted_comments = ""
                for comment in task['comments'].strip().split('\n'):  # –†–∞–∑–¥–µ–ª—è–µ–º –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–∏ –ø–æ —Å—Ç—Ä–æ–∫–∞–º
                    formatted_comments += f"<blockquote>{comment}</blockquote>\n" # –û–±–æ—Ä–∞—á–∏–≤–∞–µ–º –∫–∞–∂–¥—ã–π –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π –≤ <blockquote>

                task_text += f"<b>–ö–æ–º–º–µ–Ω—Ç–∞—Ä–∏–∏:</b>\n{formatted_comments}"
                
            if message.photo:
                await message.answer_photo(
                    photo=message.photo[-1].file_id,
                    caption=task_text,
                    reply_markup=task_executor_keyboarda(task_id) if task['status'] == 'done' else task_executor_keyboard(task_id),
                    parse_mode="HTML"
                )
            else:
                await message.answer(
                    task_text,
                    reply_markup=task_executor_keyboarda(task_id) if task['status'] == 'done' else task_executor_keyboard(task_id),
                    parse_mode="HTML"
                )
    else:
        await message.answer("–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –¥–æ–±–∞–≤–ª–µ–Ω–∏–∏ –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏—è.")
        await state.clear()

@router.message(F.text == "–ú–æ–∏ –∑–∞–¥–∞—á–∏")
async def my_tasks_handler(message: Message, db: Database):
    """
    –û—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–µ —Å–ø–∏—Å–∫–∞ –∑–∞–¥–∞—á –¥–ª—è –∏—Å–ø–æ–ª–Ω–∏—Ç–µ–ª—è.
    """
    user_id = str(message.from_user.id).lower()
    # print(user_id)
    tasks = db.get_tasks_by_user(user_id)

    if not tasks:
        await message.answer("–£ –≤–∞—Å –ø–æ–∫–∞ –Ω–µ—Ç –∑–∞–¥–∞—á.")
        return

    # –°–æ–∑–¥–∞–µ–º –∫–Ω–æ–ø–∫–∏ –¥–ª—è –∑–∞–¥–∞—á
    task_buttons = [
        InlineKeyboardButton(
            text=f"{task['title'][:25]}...",  # –£–∫–æ—Ä–æ—á–µ–Ω–Ω–æ–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –∑–∞–¥–∞—á–∏
            callback_data=f"view_my_task:{task['id']}"
        )
        for task in tasks if not task['status'] == 'completed' and not task['status'] == 'done'
    ]

    # –§–æ—Ä–º–∏—Ä—É–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É
    keyboard = InlineKeyboardMarkup(
        inline_keyboard=[[button] for button in task_buttons]  # –ö–Ω–æ–ø–∫–∏ –∑–∞–¥–∞—á
    )

    # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–ø–∏—Å–æ–∫ –∑–∞–¥–∞—á
    await message.answer("üìã –í–∞—à–∏ –∑–∞–¥–∞—á–∏:", reply_markup=keyboard)

async def show_task_details(callback_query: CallbackQuery, db: Database, task_id: int):
    """–û–±—â–∞—è —Ñ—É–Ω–∫—Ü–∏—è –¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è –¥–µ—Ç–∞–ª–µ–π –∑–∞–¥–∞—á–∏."""
    task = db.get_task_by_id(task_id)

    if not task:
        await callback_query.message.edit_text("–ó–∞–¥–∞—á–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞.")
        return

    task_text = (
        f" <b>–î–µ—Ç–∞–ª–∏ –∑–∞–¥–∞—á–∏:</b>\n\n"
        f"<b>–õ–æ–∫–∞—Ü–∏—è:</b> {task['location']}\n"
        f" <b>–ù–∞–∑–≤–∞–Ω–∏–µ:</b> {task['title']}\n"
        f" <b>–°—Ç–æ–∏–º–æ—Å—Ç—å –∑–∞–¥–∞—á–∏:</b> {task['description']}\n"
        f" <b>–î–µ–¥–ª–∞–π–Ω:</b> {task['deadline_formatted']}\n"
        f" <b>–°—Ç–∞—Ç—É—Å:</b> {task['status']}\n\n"
    )

    if task['comments'] and task['comments'] != '_':
        formatted_comments = ""
        for comment in task['comments'].strip().split('\n'):
            formatted_comments += f"<blockquote>{comment}</blockquote>\n"
        task_text += f"<b>–ö–æ–º–º–µ–Ω—Ç–∞—Ä–∏–∏:</b>\n{formatted_comments}"

    await callback_query.message.delete()

    reply_markup = task_executor_keyboard(task_id) if task['status'] == 'pending' else task_executor_keyboarda(task_id)

    if task["ref_photo"]:
        await callback_query.message.answer_photo(
            photo=task["ref_photo"],
            caption=task_text,
            reply_markup=reply_markup,
            parse_mode="HTML"
        )
    else:
        await callback_query.message.answer(
            task_text,
            reply_markup=reply_markup,
            parse_mode="HTML"
        )

@router.callback_query(F.data.startswith("view_my_task:"))
async def view_my_task(callback_query: CallbackQuery, db: Database):
    task_id = int(callback_query.data.split(":")[1])
    await show_task_details(callback_query, db, task_id)

@router.callback_query(F.data.startswith("view_my_done_task:"))
async def view_my_done_task(callback_query: CallbackQuery, db: Database):
    task_id = int(callback_query.data.split(":")[1])
    await show_task_details(callback_query, db, task_id)


@router.callback_query(F.data == "back_to_my_tasks")
async def back_to_my_tasks(callback_query: CallbackQuery, db: Database):
    """
    –í–æ–∑–≤—Ä–∞—â–µ–Ω–∏–µ –∫ —Å–ø–∏—Å–∫—É –∑–∞–¥–∞—á –∏—Å–ø–æ–ª–Ω–∏—Ç–µ–ª—è.
    """
    user_id = callback_query.from_user.id
    tasks = db.get_tasks_by_user(user_id)

    if not tasks:
        await callback_query.message.edit_text("–£ –≤–∞—Å –ø–æ–∫–∞ –Ω–µ—Ç –∑–∞–¥–∞—á.")
        return

    # –°–æ–∑–¥–∞–µ–º –∫–Ω–æ–ø–∫–∏ –¥–ª—è –∑–∞–¥–∞—á
    task_buttons = [
        InlineKeyboardButton(
            text=f"{task['title'][:25]}...",  # –£–∫–æ—Ä–æ—á–µ–Ω–Ω–æ–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –∑–∞–¥–∞—á–∏
            callback_data=f"view_my_task:{task['id']}"
        )
        for task in tasks if not task['status'] == 'completed' and not task['status'] == 'done'
    ]

    # –§–æ—Ä–º–∏—Ä—É–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É
    keyboard = InlineKeyboardMarkup(
        inline_keyboard=[[button] for button in task_buttons]  # –ö–Ω–æ–ø–∫–∏ –∑–∞–¥–∞—á
    )

    # –£–¥–∞–ª—è–µ–º —Å—Ç–∞—Ä–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –∏ –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–ø–∏—Å–æ–∫ –∑–∞–¥–∞—á
    await callback_query.message.delete()
    await callback_query.message.answer("üìã –í–∞—à–∏ –∑–∞–¥–∞—á–∏:", reply_markup=keyboard) # –ò—Å–ø–æ–ª—å–∑—É–µ–º edit_text

    
@router.callback_query(F.data.startswith("take_task:"))
async def take_task_handler(callback_query: CallbackQuery, db: Database, bot: Bot):
    user_id = callback_query.from_user.id
    task_id = callback_query.data.split(":")[1]

    tasks = db.get_tasks_by_user(user_id)
    # –ò—Å–ø–æ–ª—å–∑—É–µ–º any –∏ –±–æ–ª–µ–µ —è–≤–Ω—ã–µ —É—Å–ª–æ–≤–∏—è
    is_working = any(task["status"] == "is_on_work" for task in tasks)
    is_completed = any(task["status"] in ("done", "completed") for task in tasks)

    if is_working:
        await callback_query.message.answer(
            "–í—ã —É–∂–µ —Ä–∞–±–æ—Ç–∞–µ—Ç–µ –Ω–∞–¥ –∑–∞–¥–∞—á–µ–π, –∑–∞–≤–µ—Ä—à–∏—Ç–µ –µ—ë, —á—Ç–æ–±—ã –ø–µ—Ä–µ–π—Ç–∏ –∫ —Å–ª–µ–¥—É—é—â–µ–π!",
            reply_markup=task_executor_keyboard(task_id)
        )
    elif is_completed:
        return  # –ù–∏—á–µ–≥–æ –Ω–µ –¥–µ–ª–∞–µ–º, –µ—Å–ª–∏ –∑–∞–¥–∞—á–∞ —É–∂–µ –∑–∞–≤–µ—Ä—à–µ–Ω–∞
    else:
        db.update_task_status(task_id, "is_on_work")
        task = db.get_task_by_id(task_id)
        await callback_query.message.edit_reply_markup(reply_markup=task_executor_keyboarda(task_id))
        await callback_query.message.answer("–í—ã –≤–∑—è–ª–∏—Å—å –∑–∞ –∑–∞–¥–∞—á—É!")
    
        # –û—Ç–ø—Ä–∞–≤–∫–∞ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –≤ –æ–±—â–∏–π –∫–∞–Ω–∞–ª
        task_text = (
           f"üõ†Ô∏è <b>–ó–∞–¥–∞—á–∞ –≤–∑—è—Ç–∞ –≤ —Ä–∞–±–æ—Ç—É:</b>\n"
            f"üîñ <b>–ù–∞–∑–≤–∞–Ω–∏–µ:</b> {task['title']}\n"
            f"üë§ <b>–ò—Å–ø–æ–ª–Ω–∏—Ç–µ–ª—å:</b> {db.get_user_by_id(user_id)['username']}\n"
        )
        await send_channel_message(bot, CHANNEL_ID, task_text)


@router.callback_query(F.data.startswith("complete_task:"))
async def complete_task_handler(callback_query: CallbackQuery, state: FSMContext, db: Database, bot: Bot):
    task_id = callback_query.data.split(":")[1]
    await state.update_data(task_id=task_id)  # –°–æ—Ö—Ä–∞–Ω—è–µ–º task_id –≤ —Å–æ—Å—Ç–æ—è–Ω–∏–µ
    print(f"Task ID: {task_id}")
    await callback_query.message.answer("–û—Ç–ø—Ä–∞–≤—å—Ç–µ —Ñ–æ—Ç–æ –≤—ã–ø–æ–ª–Ω–µ–Ω–Ω–æ–π —Ä–∞–±–æ—Ç—ã:")
    await state.set_state(ReportTaskFSM.photo)

@router.message(F.photo, StateFilter(ReportTaskFSM.photo))
async def handle_report_photo(message: Message, state: FSMContext):
    # –ü–æ–ª—É—á–∞–µ–º —Ñ–æ—Ç–æ
    photo_id = message.photo[-1].file_id  # –ë–µ—Ä–µ–º –Ω–∞–∏–±–æ–ª—å—à–∏–π —Ä–∞–∑–º–µ—Ä —Ñ–æ—Ç–æ
    await state.update_data(photo=photo_id)  # –°–æ—Ö—Ä–∞–Ω—è–µ–º —Ñ–æ—Ç–æ –≤ —Å–æ—Å—Ç–æ—è–Ω–∏–µ
    
    # –ü–µ—Ä–µ—Ö–æ–¥ –Ω–∞ —Å–ª–µ–¥—É—é—â–∏–π —à–∞–≥
    await message.answer("–§–æ—Ç–æ –ø—Ä–∏–Ω—è—Ç–æ. –¢–µ–ø–µ—Ä—å –æ—Ç–ø—Ä–∞–≤—å—Ç–µ —Ç–µ–∫—Å—Ç–æ–≤—ã–π –æ—Ç—á–µ—Ç:")
    await state.set_state(ReportTaskFSM.report_text)

@router.message(F.text, StateFilter(ReportTaskFSM.report_text))
async def handle_report_text(message: Message, state: FSMContext, db: Database, bot: Bot):
    # –ü–æ–ª—É—á–∞–µ–º —Ç–µ–∫—Å—Ç –æ—Ç—á–µ—Ç–∞
    report_text = message.text

    # –ü–æ–ª—É—á–∞–µ–º —Å–æ—Ö—Ä–∞–Ω–µ–Ω–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ –∏–∑ —Å–æ—Å—Ç–æ—è–Ω–∏—è
    data = await state.get_data()
    task_id = data["task_id"]
    photo_id = data["photo"]

    # –û–±–Ω–æ–≤–ª—è–µ–º –∑–∞–¥–∞—á—É –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö
    db.update_task_report(task_id, report_text, photo_id)
    task = db.get_task_by_id(task_id)

    # –û—Ç–ø—Ä–∞–≤–∫–∞ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –≤ –æ–±—â–∏–π –∫–∞–Ω–∞–ª
    user_id = message.from_user.id
    task_text = (
        f"‚úÖ <b>–ó–∞–¥–∞—á–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞:</b>\n"
        f"üîñ <b>–ù–∞–∑–≤–∞–Ω–∏–µ:</b> {task['title']}\n"
        f"üë§ <b>–ò—Å–ø–æ–ª–Ω–∏—Ç–µ–ª—å:</b> {db.get_user_by_id(user_id)['username']}\n"
    )
    await send_channel_message(bot, CHANNEL_ID, task_text)


    
    # –ó–∞–≤–µ—Ä—à–∞–µ–º FSM
    await state.clear()
    await message.answer("–û—Ç—á–µ—Ç –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—É. –°–ø–∞—Å–∏–±–æ!")

@router.message(F.text == "–ó–∞–≤–µ—Ä—à–µ–Ω–Ω—ã–µ –∑–∞–¥–∞—á–∏")
async def done_tasks(message: Message, db: Database):

    user_id = message.from_user.id
    tasks = db.get_tasks_by_user(user_id)

    if not tasks:
        await message.answer("–£ –≤–∞—Å –ø–æ–∫–∞ –Ω–µ—Ç –∑–∞–≤–µ—Ä—à–µ–Ω–Ω—ã—Ö –∑–∞–¥–∞—á.")
        return
    
    # –°–æ–∑–¥–∞–µ–º –∫–Ω–æ–ø–∫–∏ –¥–ª—è –∑–∞–¥–∞—á
    task_buttons = [
        InlineKeyboardButton(
            text=f"{task['title'][:25]}...",  # –£–∫–æ—Ä–æ—á–µ–Ω–Ω–æ–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –∑–∞–¥–∞—á–∏
            callback_data=f"view_my_done_task:{task['id']}"
        )
        for task in tasks if task['status'] == 'done' or task['status'] == 'completed'
    ]

    # –§–æ—Ä–º–∏—Ä—É–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É
    keyboard = InlineKeyboardMarkup(
        inline_keyboard=[[button] for button in task_buttons]  # –ö–Ω–æ–ø–∫–∏ –∑–∞–¥–∞—á
    )

    # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–ø–∏—Å–æ–∫ –∑–∞–¥–∞—á
    await message.answer("üìã –í–∞—à–∏ –∑–∞–≤–µ—Ä—à–µ–Ω–Ω—ã–µ –∑–∞–¥–∞—á–∏:", reply_markup=keyboard)

@router.message(F.text == "–ú–æ—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞")
async def executor_statistics(message: types.Message, db: Database):
    """–û—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–µ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ –¥–ª—è –∏—Å–ø–æ–ª–Ω–∏—Ç–µ–ª—è."""
    user_id = message.from_user.id

    total_user_tasks = db.get_user_tasks_count(user_id)
    pending_user_tasks = db.get_user_tasks_count_by_status(user_id, "pending")
    is_on_work_user_tasks = db.get_user_tasks_count_by_status(user_id, "is_on_work")
    done_user_tasks = db.get_user_tasks_count_by_status(user_id, "done")
    completed_user_tasks = db.get_user_tasks_count_by_status(user_id, "completed")

    response = (
        " <b>–í–∞—à–∞ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞:</b>\n\n"
        f"<b>–ó–∞–¥–∞—á–∏:</b>\n"
        f"–í—Å–µ–≥–æ: {total_user_tasks}\n"
        f"–û–∂–∏–¥–∞—é—Ç –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è: {pending_user_tasks}\n"
        f"–í —Ä–∞–±–æ—Ç–µ: {is_on_work_user_tasks}\n"
        f"–í—ã–ø–æ–ª–Ω–µ–Ω—ã: {done_user_tasks}\n"
        f"–ó–∞–≤–µ—Ä—à–µ–Ω—ã: {completed_user_tasks}\n"
    )

    await message.answer(response, parse_mode="HTML")
    await message.delete()