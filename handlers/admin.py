from aiogram import Router, F, Bot, types
from aiogram.filters import StateFilter
from aiogram.types import Message
from aiogram.fsm.context import FSMContext
from aiogram.fsm.state import State, StatesGroup
from keyboards.reply import admin_menu_keyboard, skip_photo, executor_menu_keyboard
from keyboards.inline import assign_executor_keyboard, empty_keyboard, role_selection_keyboard, task_admin_keyboard, task_admin_keyboardb, reassign_executor_keyboard, user_list_keyboard
from database import Database
from aiogram.types import CallbackQuery, ReplyKeyboardRemove, InlineKeyboardMarkup, InlineKeyboardButton
from handlers.common import send_menu
from bot import bot


router = Router()

# –ú–∞—à–∏–Ω–∞ —Å–æ—Å—Ç–æ—è–Ω–∏–π –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è –∑–∞–¥–∞—á–∏
class CreateTaskFSM(StatesGroup):
    title = State()
    description = State()
    deadline = State()
    photo = State()
    assign = State()
    location = State()  # –î–æ–±–∞–≤–ª—è–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ –¥–ª—è –≤—ã–±–æ—Ä–∞ –ª–æ–∫–∞—Ü–∏–∏
    selected_executors = State()  # –î–ª—è —Ö—Ä–∞–Ω–µ–Ω–∏—è –≤—ã–±—Ä–∞–Ω–Ω—ã—Ö –∏—Å–ø–æ–ª–Ω–∏—Ç–µ–ª–µ–π

#–°–æ–∑–¥–∞–µ–º FSM
class AddCommentFSM(StatesGroup):
    waiting_for_comment = State()
    task_id = State()

async def format_task_text(task: dict, db: Database) -> str:
    """–§–æ—Ä–º–∞—Ç–∏—Ä—É–µ—Ç —Ç–µ–∫—Å—Ç –∑–∞–¥–∞—á–∏, –≤–∫–ª—é—á–∞—è –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–∏ –∏ –∏—Å–ø–æ–ª–Ω–∏—Ç–µ–ª–µ–π."""
    if task['assigned_to']:
        assigned_user_ids = [int(user_id) for user_id in task['assigned_to'].split(",")]
        assigned_users = [db.get_user_by_id(user_id)['username'] for user_id in assigned_user_ids if db.get_user_by_id(user_id)]
        assigned_users_str = ", ".join(assigned_users)
    else:
        assigned_users_str = "–ù–µ –Ω–∞–∑–Ω–∞—á–µ–Ω–æ"

    task_text = (
        f"<b>–î–µ—Ç–∞–ª–∏ –∑–∞–¥–∞—á–∏:</b>\n\n"
        f"<b>–ù–∞–∑–≤–∞–Ω–∏–µ:</b> {task['title']}\n"
        f"<b>–û–ø–∏—Å–∞–Ω–∏–µ:</b> {task['description']}\n"
        f"<b>–î–µ–¥–ª–∞–π–Ω:</b> {task['deadline']}\n"
        f"<b>–ò—Å–ø–æ–ª–Ω–∏—Ç–µ–ª–∏:</b> {assigned_users_str}\n"
        f"<b>–°—Ç–∞—Ç—É—Å:</b> {task['status']}\n\n"
    )

    if task['comments'] and task['comments'] != '_':
        formatted_comments = ""
        for comment in task['comments'].strip().split('\n'):
            formatted_comments += f"<blockquote>{comment}</blockquote>\n"
        task_text += f"<b>–ö–æ–º–º–µ–Ω—Ç–∞—Ä–∏–∏:</b>\n{formatted_comments}"

    return task_text

@router.callback_query(F.data.startswith("take_task:"))
async def take_task_handler(callback_query: CallbackQuery):
    db = Database()
    user_id = callback_query.message.from_user.id
    task_id = callback_query.data.split(":")[1]

    tasks = db.get_tasks_by_user(user_id)
    is_working = any(task["status"] == "is_on_work" for task in tasks)

    if is_working:
        await callback_query.answer("–í—ã —É–∂–µ —Ä–∞–±–æ—Ç–∞–µ—Ç–µ –Ω–∞–¥ –∑–∞–¥–∞—á–µ–π, –∑–∞–≤–µ—Ä—à–∏—Ç–µ –µ—ë, —á—Ç–æ–±—ã –ø–µ—Ä–µ–π—Ç–∏ –∫ —Å–ª–µ–¥—É—é—â–µ–π!", show_alert=True)
    else:
        db.update_task_status(task_id, "is_on_work")
        task_status = db.get_task_by_id(task_id)["status"]
        await callback_query.message.edit_reply_markup(reply_markup=task_admin_keyboard(task_id, task_status))

# –í admin.py –∏ executor.py (–æ–±—Ä–∞–±–æ—Ç—á–∏–∫ –Ω–∞–∂–∞—Ç–∏—è –Ω–∞ –∫–Ω–æ–ø–∫—É "–î–æ–±–∞–≤–∏—Ç—å –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π")
@router.callback_query(F.data.startswith("add_comment:"))
async def add_comment_handler(callback_query: CallbackQuery, state: FSMContext):
    task_id = int(callback_query.data.split(":")[1])
    await state.update_data(task_id=task_id) # —Å–æ—Ö—Ä–∞–Ω—è–µ–º task_id –≤ FSMContext
    await callback_query.message.answer("–í–≤–µ–¥–∏—Ç–µ —Ç–µ–∫—Å—Ç –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏—è:")
    await state.set_state(AddCommentFSM.waiting_for_comment)

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –ø–æ–ª—É—á–µ–Ω–∏—è —Ç–µ–∫—Å—Ç–∞ –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏—è (–≤ admin.py –∏ executor.py):
@router.message(F.text, StateFilter(AddCommentFSM.waiting_for_comment))
async def process_comment(message: Message, state: FSMContext, db: Database):
    comment_text = message.text
    data = await state.get_data()
    task_id = data.get("task_id")

    if task_id:
        db.update_task_comments(task_id, comment_text)
        await message.answer("–ö–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π –¥–æ–±–∞–≤–ª–µ–Ω.")
        await state.clear() # –æ—á–∏—â–∞–µ–º FSM
        # –û–±–Ω–æ–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –∑–∞–¥–∞—á–µ–π, —á—Ç–æ–±—ã –æ—Ç–æ–±—Ä–∞–∑–∏—Ç—å –Ω–æ–≤—ã–π –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π (–Ω—É–∂–Ω–æ –ø–æ–ª—É—á–∏—Ç—å task –∏ —Å—Ñ–æ—Ä–º–∏—Ä–æ–≤–∞—Ç—å —Ç–µ–∫—Å—Ç)
        task = db.get_task_by_id(task_id)
        if task:
            assigned_users = ", ".join([
                f"{db.get_user_by_id(int(user))['username']}"
                for user in task['assigned_to'].split(",")
            ])
            task_text = (
                f" <b>–î–µ—Ç–∞–ª–∏ –∑–∞–¥–∞—á–∏:</b>\n\n"
                f" <b>–ù–∞–∑–≤–∞–Ω–∏–µ:</b> {task['title']}\n"
                f" <b>–û–ø–∏—Å–∞–Ω–∏–µ:</b> {task['description']}\n"
                f" <b>–î–µ–¥–ª–∞–π–Ω:</b> {task['deadline']}\n"
                f" <b>–ò—Å–ø–æ–ª–Ω–∏—Ç–µ–ª–∏:</b> {assigned_users}\n"
                f" <b>–°—Ç–∞—Ç—É—Å:</b> {task['status']}\n\n"
            )
            if task['comments'] and task['comments'] != '_': # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å—Ç—å –ª–∏ –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–∏
                formatted_comments = ""
                for comment in task['comments'].strip().split('\n'):  # –†–∞–∑–¥–µ–ª—è–µ–º –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–∏ –ø–æ —Å—Ç—Ä–æ–∫–∞–º
                    formatted_comments += f"<blockquote>{comment}</blockquote>\n" # –û–±–æ—Ä–∞—á–∏–≤–∞–µ–º –∫–∞–∂–¥—ã–π –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π –≤ <blockquote>

                task_text += f"<b>–ö–æ–º–º–µ–Ω—Ç–∞—Ä–∏–∏:</b>\n{formatted_comments}"

            if message.photo:
                await message.answer_photo(
                    photo=message.photo[-1].file_id,
                    caption=task_text,
                    reply_markup=task_admin_keyboard(task_id, task['status']),
                    parse_mode="HTML"
                )
            else:
                await message.answer(
                    task_text,
                    reply_markup=task_admin_keyboard(task_id, task['status']),
                    parse_mode="HTML"
                )
    else:
        await message.answer("–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –¥–æ–±–∞–≤–ª–µ–Ω–∏–∏ –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏—è.")
        await state.clear()

    if task:
        task_text = await format_task_text(task, db) # –ò—Å–ø–æ–ª—å–∑—É–µ–º —Ñ—É–Ω–∫—Ü–∏—é —Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏—è

        if message.photo:
            await message.answer_photo(photo=message.photo[-1].file_id, caption=task_text, reply_markup=task_admin_keyboard(task_id, task['status']), parse_mode="HTML")
        else:
            await message.answer(task_text, reply_markup=task_admin_keyboard(task_id, task['status']), parse_mode="HTML")



async def notify_executors(bot: Bot, executors: list[int], task_title: str, task_deadline: str):
    for executor_id in executors:
        try:
            # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ
            await bot.send_message(
                chat_id=executor_id,
                text=(
                    f"üìå <b>–í–∞–º –Ω–∞–∑–Ω–∞—á–µ–Ω–∞ –Ω–æ–≤–∞—è –∑–∞–¥–∞—á–∞:</b>\n"
                    f"üîñ <b>–ù–∞–∑–≤–∞–Ω–∏–µ:</b> {task_title}\n"
                    f"‚è∞ <b>–î–µ–¥–ª–∞–π–Ω:</b> {task_deadline}\n"
                    # f"üÜî <b>ID:</b> {task_id}\n\n"
                    "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤—ã–ø–æ–ª–Ω–∏—Ç–µ –µ—ë –≤–æ–≤—Ä–µ–º—è. –û–Ω–∞ —É–∂–µ –≤ —Å–ø–∏—Å–∫–µ –¥–æ—Å—Ç—É–ø–Ω—ã—Ö –≤–∞–º –∑–∞–¥–∞—á."
                ),
                parse_mode="HTML",
                # reply_markup=keyboard
            )
        except Exception as e:
            # –û–±—Ä–∞–±–æ—Ç–∫–∞ –æ—à–∏–±–æ–∫ –æ—Ç–ø—Ä–∞–≤–∫–∏ (–Ω–∞–ø—Ä–∏–º–µ—Ä, –µ—Å–ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–ª –±–æ—Ç–∞)
            print(f"–ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–ø—Ä–∞–≤–∏—Ç—å —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é {executor_id}: {e}")
    


# –ù–∞—á–∞–ª–æ —Å–æ–∑–¥–∞–Ω–∏—è –∑–∞–¥–∞—á–∏
@router.message(F.text == "–°–æ–∑–¥–∞—Ç—å –∑–∞–¥–∞—á—É")
async def start_create_task(message: Message, state: FSMContext):
    await message.answer("–í–≤–µ–¥–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –∑–∞–¥–∞—á–∏:", reply_markup=ReplyKeyboardRemove())
    await message.delete()  # –£–¥–∞–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –≤—ã–±–æ—Ä–æ–º
    await state.set_state(CreateTaskFSM.title)

# –í–≤–æ–¥ –Ω–∞–∑–≤–∞–Ω–∏—è –∑–∞–¥–∞—á–∏
@router.message(F.text, StateFilter(CreateTaskFSM.title))
async def handle_task_title(message: Message, state: FSMContext):
    await state.update_data(title=message.text)
    await message.answer("–í–≤–µ–¥–∏—Ç–µ –æ–ø–∏—Å–∞–Ω–∏–µ –∑–∞–¥–∞—á–∏:")
    await message.delete()  # –£–¥–∞–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –≤—ã–±–æ—Ä–æ–º
    await state.set_state(CreateTaskFSM.description)


# –í–≤–æ–¥ –æ–ø–∏—Å–∞–Ω–∏—è –∑–∞–¥–∞—á–∏
@router.message(F.text, StateFilter(CreateTaskFSM.description))
async def handle_task_description(message: Message, state: FSMContext):
    await state.update_data(description=message.text)
    await message.answer("–í–≤–µ–¥–∏—Ç–µ –¥–µ–¥–ª–∞–π–Ω –∑–∞–¥–∞—á–∏ (–≤ —Ñ–æ—Ä–º–∞—Ç–µ –î–î-–ú–ú):")
    await message.delete()  # –£–¥–∞–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –≤—ã–±–æ—Ä–æ–º
    await state.set_state(CreateTaskFSM.deadline)
    
# –í–≤–æ–¥ –¥–µ–¥–ª–∞–π–Ω–∞ –∑–∞–¥–∞—á–∏
@router.message(F.text, StateFilter(CreateTaskFSM.deadline))
async def handle_task_deadline(message: Message, state: FSMContext):
    await state.update_data(deadline=message.text)
    await message.answer("–ó–∞–≥—Ä—É–∑–∏—Ç–µ —Ñ–æ—Ç–æ-—Ä–µ—Ñ–µ—Ä–µ–Ω—Å –∑–∞–¥–∞—á–∏:", reply_markup=skip_photo)
    await message.delete()  # –£–¥–∞–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –≤—ã–±–æ—Ä–æ–º
    await state.set_state(CreateTaskFSM.photo)

# –ó–∞–≥—Ä—É–∑–∫–∞ —Ñ–æ—Ç–æ-—Ä–µ—Ñ–µ—Ä–µ–Ω—Å–∞ (–∏–∑–º–µ–Ω–µ–Ω–æ)
@router.message(F.photo, StateFilter(CreateTaskFSM.photo))
async def handle_task_photo(message: Message, state: FSMContext):
    photo_id = message.photo[-1].file_id
    await state.update_data(photo=photo_id)
    await show_location_selection(message, state) # –í—ã–∑—ã–≤–∞–µ–º —Ñ—É–Ω–∫—Ü–∏—é –≤—ã–±–æ—Ä–∞ –ª–æ–∫–∞—Ü–∏–∏

# –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∞ –ø—Ä–æ–ø—É—Å–∫–∞ —Ñ–æ—Ç–æ (–∏–∑–º–µ–Ω–µ–Ω–æ)
@router.message(F.text == "–ü—Ä–æ–ø—É—Å—Ç–∏—Ç—å", StateFilter(CreateTaskFSM.photo))
async def skip_task_photo(message: Message, state: FSMContext):
    await state.update_data(photo=None)
    await show_location_selection(message, state) # –í—ã–∑—ã–≤–∞–µ–º —Ñ—É–Ω–∫—Ü–∏—é –≤—ã–±–æ—Ä–∞ –ª–æ–∫–∞—Ü–∏–∏

# –§—É–Ω–∫—Ü–∏—è –¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è –≤—ã–±–æ—Ä–∞ –ª–æ–∫–∞—Ü–∏–∏ (–≤—ã–Ω–µ—Å–µ–Ω–æ –≤ –æ—Ç–¥–µ–ª—å–Ω—É—é —Ñ—É–Ω–∫—Ü–∏—é –¥–ª—è –ø–µ—Ä–µ–∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è)
async def show_location_selection(message: Message, state: FSMContext):
    locations = ["–û—Ç–µ–ª—å", "–†–µ—Å—Ç–æ—Ä–∞–Ω", "–ó–æ–æ–ø–∞—Ä–∫", "–°—Ç–∞—Ñ—Ñ –∑–æ–Ω–∞", "–ë–ª–∞–≥–æ—É—Å—Ç—Ä–æ–π—Å—Ç–≤–æ kosa", "–û—Ä–∞–Ω–∂–µ—Ä–µ—è", "–í–∏–Ω–æ–¥–µ–ª—å–Ω—è", "–ë–∞—Å—Å–µ–π–Ω N1", "–ë–∞—Å—Å–µ–π–Ω N2", "4 –∂–∏–ª—ã—Ö", "–ë–ª–∞–≥–æ—É—Å—Ç—Ä–æ–π—Å—Ç–≤–æ villoyat", "–í—Å—è —Ñ–µ—Ä–º–∞"]
    keyboard = InlineKeyboardMarkup(
        inline_keyboard=[
        [
            InlineKeyboardButton(text=locations[i], callback_data=f"location:{locations[i]}"),
            InlineKeyboardButton(text=locations[i+1], callback_data=f"location:{locations[i+1]}") if i + 1 < len(locations) else None # –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞ –≤—ã—Ö–æ–¥ –∑–∞ –≥—Ä–∞–Ω–∏—Ü—ã —Å–ø–∏—Å–∫–∞
        ]for i in range(0, len(locations), 2)])
    # await message.edit_reply_markup(reply_markup=ReplyKeyboardRemove())
    await message.answer("–í—ã–±–µ—Ä–∏—Ç–µ –º–µ—Å—Ç–æ–ø–æ–ª–æ–∂–µ–Ω–∏–µ –∑–∞–¥–∞—á–∏:", reply_markup=keyboard)
    await state.set_state(CreateTaskFSM.location)

# –û–±—Ä–∞–±–æ—Ç–∫–∞ –≤—ã–±–æ—Ä–∞ –ª–æ–∫–∞—Ü–∏–∏
@router.callback_query(F.data.startswith("location:"), StateFilter(CreateTaskFSM.location))
async def handle_task_location(callback_query: CallbackQuery, state: FSMContext):
    location = callback_query.data.split(":")[1]
    await state.update_data(location=location)

    db = Database()
    executors = db.get_all_users()
    if not executors:
        await callback_query.message.answer("–ù–µ—Ç –¥–æ—Å—Ç—É–ø–Ω—ã—Ö –∏—Å–ø–æ–ª–Ω–∏—Ç–µ–ª–µ–π.")
        await state.clear()
        return

    await callback_query.message.edit_text("–í—ã–±–µ—Ä–∏—Ç–µ –∏—Å–ø–æ–ª–Ω–∏—Ç–µ–ª–µ–π –¥–ª—è –∑–∞–¥–∞—á–∏ (–Ω–∞–∂–∏–º–∞–π—Ç–µ –Ω–∞ –∏–º–µ–Ω–∞). –ö–æ–≥–¥–∞ –∑–∞–∫–æ–Ω—á–∏—Ç–µ, –Ω–∞–∂–º–∏—Ç–µ '–ó–∞–≤–µ—Ä—à–∏—Ç—å –≤—ã–±–æ—Ä'.",
        reply_markup=assign_executor_keyboard(executors, multiple=True)
    )
    await state.set_state(CreateTaskFSM.selected_executors)


# –ù–∞–∑–Ω–∞—á–µ–Ω–∏–µ –∏—Å–ø–æ–ª–Ω–∏—Ç–µ–ª—è
@router.callback_query(F.data.startswith("assign_"), StateFilter(CreateTaskFSM.selected_executors))
async def select_executor(callback_query: CallbackQuery, state: FSMContext):
    executor_id = int(callback_query.data.split("_")[1])
    data = await state.get_data()
    selected_executors = data.get("selected_executors", [])
    
    if executor_id not in selected_executors:
        selected_executors.append(executor_id)  # –î–æ–±–∞–≤–ª—è–µ–º –∏—Å–ø–æ–ª–Ω–∏—Ç–µ–ª—è
        await callback_query.answer("–ò—Å–ø–æ–ª–Ω–∏—Ç–µ–ª—å –¥–æ–±–∞–≤–ª–µ–Ω!")
    else:
        selected_executors.remove(executor_id)  # –£–±–∏—Ä–∞–µ–º –∏—Å–ø–æ–ª–Ω–∏—Ç–µ–ª—è
        await callback_query.answer("–ò—Å–ø–æ–ª–Ω–∏—Ç–µ–ª—å —É–¥–∞–ª–µ–Ω!")
    
    await state.update_data(selected_executors=selected_executors)




@router.callback_query(F.data == "finish_selection", StateFilter(CreateTaskFSM.selected_executors))
async def finish_executor_selection(callback_query: CallbackQuery, state: FSMContext, db: Database, bot: Bot):
    data = await state.get_data()
    executors = data.get("selected_executors", [])
    if not executors:
        await callback_query.message.answer("–í—ã –Ω–µ –≤—ã–±—Ä–∞–ª–∏ –Ω–∏ –æ–¥–Ω–æ–≥–æ –∏—Å–ø–æ–ª–Ω–∏—Ç–µ–ª—è.")
        return

    # –°–æ—Ö—Ä–∞–Ω—è–µ–º –∑–∞–¥–∞—á—É –≤ –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö
    db.create_task(
        title=data["title"],
        description=data["description"],
        deadline=data["deadline"],
        ref_photo=data["photo"] or None,
        assigned_to=",".join(map(str, executors)),  # –•—Ä–∞–Ω–∏–º –∫–∞–∫ —Å—Ç—Ä–æ–∫—É —Å ID —á–µ—Ä–µ–∑ –∑–∞–ø—è—Ç—É—é
        report_text="#",
        report_photo="#",
        location=data.get("location") # –î–æ–±–∞–≤–ª—è–µ–º location
    )

    await notify_executors(bot, executors, data["title"], data['deadline'])

    await callback_query.message.answer("–ó–∞–¥–∞—á–∞ —É—Å–ø–µ—à–Ω–æ —Å–æ–∑–¥–∞–Ω–∞!", reply_markup=admin_menu_keyboard)
    await callback_query.message.delete()  # –£–¥–∞–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –≤—ã–±–æ—Ä–æ–º
    await state.clear()



@router.message(F.text == "–ü—Ä–æ—Å–º–æ—Ç—Ä –∑–∞–¥–∞—á")
async def view_tasks(message: Message, db: Database):
    """
    –û—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–µ –∑–∞–¥–∞—á —Å –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç—å—é —Ñ–∏–ª—å—Ç—Ä–∞—Ü–∏–∏ —á–µ—Ä–µ–∑ –∏–Ω–ª–∞–π–Ω-–∫–Ω–æ–ø–∫–∏.
    """
    tasks = db.get_all_tasks()

    if not tasks:
        await message.answer("–ù–µ—Ç –∑–∞–¥–∞—á.")
        return
    
    keyboard = create_task_list_keyboard(tasks)
    # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –∑–∞–¥–∞—á–∞–º–∏
    await message.answer("üìã –í—Å–µ –∑–∞–¥–∞—á–∏:", reply_markup=keyboard)


@router.callback_query(F.data.startswith("view_task:"))
async def view_task(callback_query: CallbackQuery, db: Database):
    task_id = int(callback_query.data.split(":")[1])
    task = db.get_task_by_id(task_id)

    if not task:
        await callback_query.message.edit_text("–ó–∞–¥–∞—á–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞.")
        return

    task_text = await format_task_text(task, db) # –ò—Å–ø–æ–ª—å–∑—É–µ–º —Ñ—É–Ω–∫—Ü–∏—é —Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏—è

    if task["ref_photo"]:
        await callback_query.message.answer_photo(photo=task["ref_photo"], caption=task_text, reply_markup=task_admin_keyboard(task_id, task['status']), parse_mode="HTML")
    else:
        await callback_query.message.answer(task_text, reply_markup=task_admin_keyboard(task_id, task['status']), parse_mode="HTML")
    await callback_query.message.delete()
    task_id = int(callback_query.data.split(":")[1])
    task = db.get_task_by_id(task_id)

    if not task:
        await callback_query.message.edit_text("–ó–∞–¥–∞—á–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞.")
        return

    if task['assigned_to']: # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å—Ç—å –ª–∏ –≤–æ–æ–±—â–µ –Ω–∞–∑–Ω–∞—á–µ–Ω–Ω—ã–µ –∏—Å–ø–æ–ª–Ω–∏—Ç–µ–ª–∏
        assigned_users_list = task['assigned_to'].split(",")
        valid_assigned_users = []
        for user_id_str in assigned_users_list:
            try:
                user_id = int(user_id_str)
                user = db.get_user_by_id(user_id)
                if user:  # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —Å—É—â–µ—Å—Ç–≤—É–µ—Ç –ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –≤ –±–∞–∑–µ
                    valid_assigned_users.append(user['username'])
            except ValueError:
                pass

        assigned_users = ", ".join(valid_assigned_users)
    else:
        assigned_users = "–ù–µ –Ω–∞–∑–Ω–∞—á–µ–Ω–æ"

    # –§–æ—Ä–º–∏—Ä—É–µ–º —Ç–µ–∫—Å—Ç –∑–∞–¥–∞—á–∏ —Å —É—á–µ—Ç–æ–º –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–µ–≤
    task_text = (
        f"<b>–î–µ—Ç–∞–ª–∏ –∑–∞–¥–∞—á–∏:</b>\n\n"
        f"<b>–ù–∞–∑–≤–∞–Ω–∏–µ:</b> {task['title']}\n"
        f"<b>–û–ø–∏—Å–∞–Ω–∏–µ:</b> {task['description']}\n"
        f"<b>–î–µ–¥–ª–∞–π–Ω:</b> {task['deadline']}\n"
        f"<b>–ò—Å–ø–æ–ª–Ω–∏—Ç–µ–ª–∏:</b> {assigned_users}\n"
        f"<b>–°—Ç–∞—Ç—É—Å:</b> {task['status']}\n\n"
    )
    if task['comments'] and task['comments'] != '_': # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å—Ç—å –ª–∏ –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–∏
        formatted_comments = ""
        for comment in task['comments'].strip().split('\n'):  # –†–∞–∑–¥–µ–ª—è–µ–º –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–∏ –ø–æ —Å—Ç—Ä–æ–∫–∞–º
            formatted_comments += f"<blockquote>{comment}</blockquote>\n" # –û–±–æ—Ä–∞—á–∏–≤–∞–µ–º –∫–∞–∂–¥—ã–π –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π –≤ <blockquote>

        task_text += f"<b>–ö–æ–º–º–µ–Ω—Ç–∞—Ä–∏–∏:</b>\n{formatted_comments}"
    
    await callback_query.message.delete()

    if task["ref_photo"]:
        await callback_query.message.answer_photo(
            photo=task["ref_photo"],
            caption=task_text,
            reply_markup=task_admin_keyboard(task_id, task['status']),
            parse_mode="HTML"
        )
    else:
        await callback_query.message.answer(
            task_text,
            reply_markup=task_admin_keyboard(task_id, task['status']),
            parse_mode="HTML"
        )
    

def create_task_list_keyboard(tasks):    
    # –°–æ–∑–¥–∞–µ–º –∏–Ω–ª–∞–π–Ω-–∫–ª–∞–≤–∏–∞—Ç—É—Ä—É —Å –∑–∞–¥–∞—á–∞–º–∏
    task_buttons = [
        InlineKeyboardButton(
            text=f"{task['title'][:25]}...",  # –£–∫–æ—Ä–æ—á–µ–Ω–Ω–æ–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –∑–∞–¥–∞—á–∏
            callback_data=f"view_task:{task['id']}"
        )
        for task in tasks if not task['status'] == 'completed' and not task['status'] == 'done'
    ]

    # –î–æ–±–∞–≤–ª—è–µ–º –∫–Ω–æ–ø–∫–∏ —Ñ–∏–ª—å—Ç—Ä–∞—Ü–∏–∏
    filter_buttons = [
        InlineKeyboardButton(text="‚úÖ –í—ã–ø–æ–ª–Ω–µ–Ω–Ω—ã–µ –∑–∞–¥–∞—á–∏", callback_data="filter:done"),
        InlineKeyboardButton(text="üõë –ó–∞–≤–µ—Ä—à–µ–Ω–Ω—ã–µ –∑–∞–¥–∞—á–∏", callback_data="filter:completed")
    ]

    # –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É
    keyboard = InlineKeyboardMarkup(
        inline_keyboard=[
            [button] for button in task_buttons  # –ö–∞–∂–¥–∞—è –∑–∞–¥–∞—á–∞ –Ω–∞ –æ—Ç–¥–µ–ª—å–Ω–æ–π —Å—Ç—Ä–æ–∫–µ
        ] + [filter_buttons]  # –ö–Ω–æ–ø–∫–∏ —Ñ–∏–ª—å—Ç—Ä–∞ –¥–æ–±–∞–≤–ª—è–µ–º –æ—Ç–¥–µ–ª—å–Ω–æ–π —Å—Ç—Ä–æ–∫–æ–π
    )

    return keyboard



@router.callback_query(F.data == "back_to_task_list")
async def back_to_task_list(callback_query: CallbackQuery, db: Database):
    tasks = db.get_all_tasks()
    if not tasks:
        await callback_query.message.edit_text("–ù–µ—Ç –∑–∞–¥–∞—á.")
        return
    keyboard = create_task_list_keyboard(tasks)
    await callback_query.message.delete()
    await callback_query.message.answer(" –í—Å–µ –∑–∞–¥–∞—á–∏:", reply_markup=keyboard)



@router.callback_query(F.data.startswith("back_to_filter_list:"))
async def back_to_filter_list(callback_query: CallbackQuery, db: Database):
    status = callback_query.data.split(":")[1]
    tasks = db.get_all_tasks()
    filtered_tasks = [task for task in tasks if task['status'] == status]
    if not filtered_tasks:
        await callback_query.message.edit_text("–ù–µ—Ç –∑–∞–¥–∞—á —Å –≤—ã–±—Ä–∞–Ω–Ω—ã–º —Å—Ç–∞—Ç—É—Å–æ–º.")
        return
    keyboard = create_task_list_keyboard(filtered_tasks)
    await callback_query.message.edit_text(f" –ó–∞–¥–∞—á–∏ —Å–æ —Å—Ç–∞—Ç—É—Å–æ–º '{status}':", reply_markup=keyboard)

@router.callback_query(F.data.startswith("filter:"))
async def filter_tasks(callback_query: CallbackQuery, db: Database):
    status = callback_query.data.split(":")[1]
    tasks = db.get_all_tasks()
    filtered_tasks = [task for task in tasks if task['status'] == status]
    if not filtered_tasks:
        await callback_query.message.edit_text("–ù–µ—Ç –∑–∞–¥–∞—á —Å –≤—ã–±—Ä–∞–Ω–Ω—ã–º —Å—Ç–∞—Ç—É—Å–æ–º.")
        return
    keyboard = create_task_list_keyboard(filtered_tasks)
    back_button = [InlineKeyboardButton(text="–ù–∞–∑–∞–¥ –∫ —Å–ø–∏—Å–∫—É", callback_data="back_to_task_list")]
    keyboard.inline_keyboard.append(back_button)
    await callback_query.message.edit_text(f" –ó–∞–¥–∞—á–∏ —Å–æ —Å—Ç–∞—Ç—É—Å–æ–º '{status}':", reply_markup=keyboard)
        

@router.callback_query(F.data.startswith("reassign_task:"))
async def reassign_task_handler(callback_query: CallbackQuery, state: FSMContext, db: Database):
    """
    –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –ø–µ—Ä–µ–Ω–∞–∑–Ω–∞—á–µ–Ω–∏—è –∏—Å–ø–æ–ª–Ω–∏—Ç–µ–ª–µ–π –¥–ª—è –∑–∞–¥–∞—á–∏.
    """
    task_id = int(callback_query.data.split(":")[1])  # –ü–æ–ª—É—á–∞–µ–º ID –∑–∞–¥–∞—á–∏
    executors = db.get_all_users()  # –ü–æ–ª—É—á–∞–µ–º —Å–ø–∏—Å–æ–∫ –≤—Å–µ—Ö –∏—Å–ø–æ–ª–Ω–∏—Ç–µ–ª–µ–π

    if not executors:
        await callback_query.message.answer("–ù–µ—Ç –¥–æ—Å—Ç—É–ø–Ω—ã—Ö –∏—Å–ø–æ–ª–Ω–∏—Ç–µ–ª–µ–π.")
        return

    # –°–æ—Ö—Ä–∞–Ω—è–µ–º ID –∑–∞–¥–∞—á–∏ –∏ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º –ø—É—Å—Ç–æ–π —Å–ø–∏—Å–æ–∫ –≤—ã–±—Ä–∞–Ω–Ω—ã—Ö –∏—Å–ø–æ–ª–Ω–∏—Ç–µ–ª–µ–π
    await state.update_data(task_id=task_id, selected_executors=[])

    # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –∏–Ω–ª–∞–π–Ω-–∫–Ω–æ–ø–∫–∞–º–∏ –∏—Å–ø–æ–ª–Ω–∏—Ç–µ–ª–µ–π
    if callback_query.message.text:
        await callback_query.message.edit_text(
            "–í—ã–±–µ—Ä–∏—Ç–µ –∏—Å–ø–æ–ª–Ω–∏—Ç–µ–ª–µ–π –¥–ª—è –∑–∞–¥–∞—á–∏ (–Ω–∞–∂–∏–º–∞–π—Ç–µ –Ω–∞ –∏–º–µ–Ω–∞). –ö–æ–≥–¥–∞ –∑–∞–∫–æ–Ω—á–∏—Ç–µ, –Ω–∞–∂–º–∏—Ç–µ '–ó–∞–≤–µ—Ä—à–∏—Ç—å –≤—ã–±–æ—Ä'.",
            reply_markup=reassign_executor_keyboard(executors, task_id, allow_finish=True)
        )
    elif callback_query.message.caption:  # –ï—Å–ª–∏ —Å–æ–æ–±—â–µ–Ω–∏–µ ‚Äî —Ñ–æ—Ç–æ
        await callback_query.message.edit_caption(
            "–í—ã–±–µ—Ä–∏—Ç–µ –∏—Å–ø–æ–ª–Ω–∏—Ç–µ–ª–µ–π –¥–ª—è –∑–∞–¥–∞—á–∏ (–Ω–∞–∂–∏–º–∞–π—Ç–µ –Ω–∞ –∏–º–µ–Ω–∞). –ö–æ–≥–¥–∞ –∑–∞–∫–æ–Ω—á–∏—Ç–µ, –Ω–∞–∂–º–∏—Ç–µ '–ó–∞–≤–µ—Ä—à–∏—Ç—å –≤—ã–±–æ—Ä'.",
            reply_markup=reassign_executor_keyboard(executors, task_id, allow_finish=True)
        )
    else:
        # –ï—Å–ª–∏ —Å–æ–æ–±—â–µ–Ω–∏–µ –Ω–µ –ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ—Ç —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ, –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º –Ω–æ–≤–æ–µ
        await callback_query.message.answer(
            "–í—ã–±–µ—Ä–∏—Ç–µ –∏—Å–ø–æ–ª–Ω–∏—Ç–µ–ª–µ–π –¥–ª—è –∑–∞–¥–∞—á–∏ (–Ω–∞–∂–∏–º–∞–π—Ç–µ –Ω–∞ –∏–º–µ–Ω–∞). –ö–æ–≥–¥–∞ –∑–∞–∫–æ–Ω—á–∏—Ç–µ, –Ω–∞–∂–º–∏—Ç–µ '–ó–∞–≤–µ—Ä—à–∏—Ç—å –≤—ã–±–æ—Ä'.",
            reply_markup=reassign_executor_keyboard(executors, task_id, allow_finish=True)
        )


@router.callback_query(F.data.startswith("toggle_executor:"))
async def toggle_executor(callback_query: CallbackQuery, state: FSMContext):
    """
    –î–æ–±–∞–≤–ª–µ–Ω–∏–µ –∏–ª–∏ —É–¥–∞–ª–µ–Ω–∏–µ –∏—Å–ø–æ–ª–Ω–∏—Ç–µ–ª—è –∏–∑ —Å–ø–∏—Å–∫–∞.
    """
    executor_id = int(callback_query.data.split(":")[1])  # ID –∏—Å–ø–æ–ª–Ω–∏—Ç–µ–ª—è
    data = await state.get_data()
    selected_executors = data.get("selected_executors", [])

    # –î–æ–±–∞–≤–ª—è–µ–º –∏–ª–∏ —É–¥–∞–ª—è–µ–º –∏—Å–ø–æ–ª–Ω–∏—Ç–µ–ª—è –∏–∑ —Å–ø–∏—Å–∫–∞
    if executor_id in selected_executors:
        selected_executors.remove(executor_id)
        await callback_query.answer("–ò—Å–ø–æ–ª–Ω–∏—Ç–µ–ª—å —É–¥–∞–ª–µ–Ω –∏–∑ —Å–ø–∏—Å–∫–∞.")
    else:
        selected_executors.append(executor_id)
        await callback_query.answer("–ò—Å–ø–æ–ª–Ω–∏—Ç–µ–ª—å –¥–æ–±–∞–≤–ª–µ–Ω –≤ —Å–ø–∏—Å–æ–∫.")

    # –°–æ—Ö—Ä–∞–Ω—è–µ–º –æ–±–Ω–æ–≤–ª–µ–Ω–Ω—ã–π —Å–ø–∏—Å–æ–∫
    await state.update_data(selected_executors=selected_executors)


@router.callback_query(F.data == "finish_selectionw")
async def finish_executor_selection(callback_query: CallbackQuery, state: FSMContext, db: Database, bot: Bot):
    """
    –ó–∞–≤–µ—Ä—à–µ–Ω–∏–µ –≤—ã–±–æ—Ä–∞ –∏—Å–ø–æ–ª–Ω–∏—Ç–µ–ª–µ–π.
    """
    data = await state.get_data()
    task_id = data.get("task_id")
    task = db.get_task_by_id(task_id)
    selected_executors = data.get("selected_executors", [])

    if not selected_executors:
        await callback_query.answer("–í—ã –Ω–µ –≤—ã–±—Ä–∞–ª–∏ –Ω–∏ –æ–¥–Ω–æ–≥–æ –∏—Å–ø–æ–ª–Ω–∏—Ç–µ–ª—è.", show_alert=True)
        return

    # –û–±–Ω–æ–≤–ª—è–µ–º –∑–∞–¥–∞—á—É –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö (—Å–æ—Ö—Ä–∞–Ω—è–µ–º ID –∏—Å–ø–æ–ª–Ω–∏—Ç–µ–ª–µ–π —á–µ—Ä–µ–∑ –∑–∞–ø—è—Ç—É—é)
    db.update_task_assigned_to(",".join(map(str, selected_executors)), task_id)

    await notify_executors(bot, selected_executors, task['title'], task['deadline'])

    await callback_query.message.answer("–ò—Å–ø–æ–ª–Ω–∏—Ç–µ–ª–∏ —É—Å–ø–µ—à–Ω–æ –Ω–∞–∑–Ω–∞—á–µ–Ω—ã!")
    await callback_query.message.delete()  # –£–¥–∞–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –≤—ã–±–æ—Ä–æ–º
    await state.clear()


@router.callback_query(F.data.startswith("checktask:"))
async def checktask_executor(callback_query, state: FSMContext, db: Database):
    task_id = callback_query.data.split(":")[1]
    task = db.get_task_by_id(task_id)
    if task['report_photo']:
        await callback_query.message.answer_photo(
            photo=task['report_photo'],
            caption=(task['report_text']),
            reply_markup=task_admin_keyboardb(task_id)
        )
    else:
        await callback_query.message.answer(
            task['report_text'],
            reply_markup=task_admin_keyboardb(task_id)
        )
    await state.clear()
    await callback_query.message.delete()  # –£–¥–∞–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –≤—ã–±–æ—Ä–æ–º

@router.callback_query(F.data.startswith("approved:"))
async def complete_task_executor(callback_query: CallbackQuery, db: Database):
    task_id = callback_query.data.split(":")[1]
    db.update_task_status(task_id, 'completed')
    await callback_query.message.answer("–ó–∞–¥–∞—á–∞ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∞")
    

@router.callback_query(F.data.startswith("add_comment:"))
async def add_comment_handler(callback_query: CallbackQuery):
    db = Database()
    task_id = callback_query.data.split(":")[1]
    oldDesc = db.get_task_by_id(task_id)['description']
    await callback_query.message.answer("–í —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–µ.")


@router.callback_query(F.data.startswith("delete_task:"))
async def delete_task_handler(callback_query: CallbackQuery, db: Database):
    task_id = int(callback_query.data.split(":")[1])
    try:
        db.delete_task(task_id=task_id)
        await callback_query.message.answer("–ó–∞–¥–∞—á–∞ —É–¥–∞–ª–µ–Ω–∞!", show_alert=True)
    except Exception as e:
        await callback_query.message.answer(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ —É–¥–∞–ª–µ–Ω–∏–∏: {e}", show_alert=True)
    await callback_query.message.delete()


@router.message(F.text == "–£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è–º–∏")
async def view_users_handler(message: Message, db: Database):
    users = db.get_all_users()
    if users:
        await message.answer("–°–ø–∏—Å–æ–∫ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π:", reply_markup=user_list_keyboard(users))
    else:
        await message.answer("–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏ –Ω–µ –Ω–∞–π–¥–µ–Ω—ã.")

@router.callback_query(F.data.startswith("user_info:"))
async def user_info_handler(callback_query: CallbackQuery, db: Database):
    user_id = int(callback_query.data.split(":")[1])
    user = db.get_user_by_id(user_id)
    if user:
        await callback_query.message.edit_text(f"–ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ:\nUsername: {user['username']}\nRole: {user['role']}", reply_markup=role_selection_keyboard(user_id))
    else:
        await callback_query.message.edit_text("–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω.")


@router.callback_query(F.data.startswith("set_role:"))
async def set_user_role_handler(callback_query: CallbackQuery, db: Database):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–ª—è —É—Å—Ç–∞–Ω–æ–≤–∫–∏ —Ä–æ–ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è."""
    _, new_role, user_id = callback_query.data.split(":")
    user_id = int(user_id)
    db.update_user_role(user_id, new_role)

    # –ü–æ–ª—É—á–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ, –∫–æ—Ç–æ—Ä–æ–º—É –∏–∑–º–µ–Ω–∏–ª–∏ —Ä–æ–ª—å
    user = db.get_user_by_id(user_id)

    if user:
        try:
            # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –Ω–µ–ø–æ—Å—Ä–µ–¥—Å—Ç–≤–µ–Ω–Ω–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é —Å –Ω–æ–≤–æ–π –∫–ª–∞–≤–∏–∞—Ç—É—Ä–æ–π
            await bot.send_message(user_id, f"–í–∞—à–∞ —Ä–æ–ª—å –∏–∑–º–µ–Ω–µ–Ω–∞ –Ω–∞ {new_role}.", reply_markup=admin_menu_keyboard if new_role == '–ê–¥–º–∏–Ω' else executor_menu_keyboard)
            await send_menu(types.Message(message_id=callback_query.message.message_id, from_user=types.User(id=user_id), chat=types.Chat(id=user_id)), db)
        except Exception as e:
            await callback_query.message.edit_text(f"–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞: {e}")

        await callback_query.message.edit_text(f"–†–æ–ª—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è —Å ID {user_id} —É—Å–ø–µ—à–Ω–æ –∏–∑–º–µ–Ω–µ–Ω–∞ –Ω–∞ {new_role}.")
    else:
        await callback_query.message.edit_text("–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω.")

@router.callback_query(F.data == "back_to_users")
async def back_to_users_handler(callback_query: CallbackQuery, db: Database):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–ª—è –≤–æ–∑–≤—Ä–∞—Ç–∞ –∫ —Å–ø–∏—Å–∫—É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π."""
    users = db.get_all_users()
    if users:
        await callback_query.message.edit_text("–°–ø–∏—Å–æ–∫ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π:", reply_markup=user_list_keyboard(users))
    else:
        await callback_query.message.edit_text("–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏ –Ω–µ –Ω–∞–π–¥–µ–Ω—ã.")

@router.callback_query(F.data.startswith("delete_user:"))
async def delete_user_handler(callback_query: CallbackQuery, db: Database):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è."""
    user_id = int(callback_query.data.split(":")[1])

    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –Ω–µ –ø—ã—Ç–∞–µ—Ç—Å—è –ª–∏ –∞–¥–º–∏–Ω —É–¥–∞–ª–∏—Ç—å —Å–∞–º–æ–≥–æ —Å–µ–±—è
    if user_id == callback_query.from_user.id:
        await callback_query.answer("–í—ã –Ω–µ –º–æ–∂–µ—Ç–µ —É–¥–∞–ª–∏—Ç—å —Å–∞–º–æ–≥–æ —Å–µ–±—è.", show_alert=True)
        return

    user = db.get_user_by_id(user_id) #–ø–æ–ª—É—á–∞–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –ø–µ—Ä–µ–¥ —É–¥–∞–ª–µ–Ω–∏–µ–º –¥–ª—è –≤—ã–≤–æ–¥–∞ —Å–æ–æ–±—â–µ–Ω–∏—è
    if user:
        db.delete_user(user_id)
        await callback_query.message.edit_text(f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {user['username']} (ID: {user_id}) —É—Å–ø–µ—à–Ω–æ —É–¥–∞–ª–µ–Ω.")
    else:
        await callback_query.message.edit_text("–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω.")


@router.message(F.text == "–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞")
async def admin_statistics(message: types.Message, db: Database):
    """–û—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–µ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ (–æ–±—â–µ–π –∏ –ø–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è–º)."""
    total_tasks = db.get_total_tasks_count()
    pending_tasks = db.get_tasks_count_by_status("pending")
    is_on_work_tasks = db.get_tasks_count_by_status("is_on_work")
    done_tasks = db.get_tasks_count_by_status("done")
    completed_tasks = db.get_tasks_count_by_status("completed")
    total_users = db.get_all_users_count()
    admin_users = db.get_users_count_by_role("–ê–¥–º–∏–Ω")
    executor_users = db.get_users_count_by_role("–ò—Å–ø–æ–ª–Ω–∏—Ç–µ–ª—å")

    response = (
        " <b>–û–±—â–∞—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞:</b>\n\n"
        f"<b>–ó–∞–¥–∞—á–∏:</b>\n"
        f"–í—Å–µ–≥–æ: {total_tasks}\n"
        f"–û–∂–∏–¥–∞—é—Ç –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è: {pending_tasks}\n"
        f"–í —Ä–∞–±–æ—Ç–µ: {is_on_work_tasks}\n"
        f"–í—ã–ø–æ–ª–Ω–µ–Ω—ã: {done_tasks}\n"
        f"–ó–∞–≤–µ—Ä—à–µ–Ω—ã: {completed_tasks}\n\n"
        f"<b>–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏:</b>\n"
        f"–í—Å–µ–≥–æ: {total_users}\n"
        f"–ê–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—ã: {admin_users}\n"
        f"–ò—Å–ø–æ–ª–Ω–∏—Ç–µ–ª–∏: {executor_users}\n"
        f"<b>–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –ø–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è–º:</b>" # –ó–∞–≥–æ–ª–æ–≤–æ–∫ –¥–ª—è –≤—ã–±–æ—Ä–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    )
    users = db.get_all_users()
    if users:
        keyboard = InlineKeyboardMarkup(inline_keyboard=[
            [InlineKeyboardButton(text=f"{user['username']}", callback_data=f"user_stats:{user['user_id']}")] for user in users
        ])
        await message.answer(response, parse_mode="HTML", reply_markup=keyboard)
    else:
        await message.answer(response + "\n–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏ –Ω–µ –Ω–∞–π–¥–µ–Ω—ã.", parse_mode="HTML")
    await message.delete()

@router.callback_query(F.data.startswith("user_stats:"))
async def user_statistics(callback_query: CallbackQuery, db: Database):
    """–û—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–µ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ –ø–æ –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–º—É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é."""
    user_id = callback_query.data.split(":")[1]
    user = db.get_user_by_id(user_id)
    if not user:
        await callback_query.message.edit_text("–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω.")
        return
    
    total_user_tasks = db.get_user_tasks_count(user_id)
    pending_user_tasks = db.get_user_tasks_count_by_status(user_id, "pending")
    is_on_work_user_tasks = db.get_user_tasks_count_by_status(user_id, "is_on_work")
    done_user_tasks = db.get_user_tasks_count_by_status(user_id, "done")
    completed_user_tasks = db.get_user_tasks_count_by_status(user_id, "completed")

    response = (
        f" <b>–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user['username']} ({user['name']}):</b>\n\n"
        f"<b>–ó–∞–¥–∞—á–∏:</b>\n"
        f"–í—Å–µ–≥–æ: {total_user_tasks}\n"
        f"–û–∂–∏–¥–∞—é—Ç –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è: {pending_user_tasks}\n"
        f"–í —Ä–∞–±–æ—Ç–µ: {is_on_work_user_tasks}\n"
        f"–í—ã–ø–æ–ª–Ω–µ–Ω—ã: {done_user_tasks}\n"
        f"–ó–∞–≤–µ—Ä—à–µ–Ω—ã: {completed_user_tasks}\n"
    )
    keyboard = InlineKeyboardMarkup(inline_keyboard=[
        [InlineKeyboardButton(text="–ù–∞–∑–∞–¥", callback_data="back_to_stats")] # –ö–Ω–æ–ø–∫–∞ "–ù–∞–∑–∞–¥"
    ])

    await callback_query.message.edit_text(response, parse_mode="HTML", reply_markup=keyboard) # –ò—Å–ø–æ–ª—å–∑—É–µ–º edit_text
    await callback_query.answer()

@router.callback_query(F.data == "back_to_stats")
async def back_to_stats(callback_query: types.CallbackQuery, db: Database):
    """–í–æ–∑–≤—Ä–∞—â–∞–µ—Ç –∫ –æ–±—â–µ–º—É —Ä–∞–∑–¥–µ–ª—É —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏."""
    total_tasks = db.get_total_tasks_count()
    pending_tasks = db.get_tasks_count_by_status("pending")
    is_on_work_tasks = db.get_tasks_count_by_status("is_on_work")
    done_tasks = db.get_tasks_count_by_status("done")
    completed_tasks = db.get_tasks_count_by_status("completed")
    total_users = db.get_all_users_count()
    admin_users = db.get_users_count_by_role("–ê–¥–º–∏–Ω")
    executor_users = db.get_users_count_by_role("–ò—Å–ø–æ–ª–Ω–∏—Ç–µ–ª—å")

    response = (
        " <b>–û–±—â–∞—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞:</b>\n\n"
        f"<b>–ó–∞–¥–∞—á–∏:</b>\n"
        f"–í—Å–µ–≥–æ: {total_tasks}\n"
        f"–û–∂–∏–¥–∞—é—Ç –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è: {pending_tasks}\n"
        f"–í —Ä–∞–±–æ—Ç–µ: {is_on_work_tasks}\n"
        f"–í—ã–ø–æ–ª–Ω–µ–Ω—ã: {done_tasks}\n"
        f"–ó–∞–≤–µ—Ä—à–µ–Ω—ã: {completed_tasks}\n\n"
        f"<b>–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏:</b>\n"
        f"–í—Å–µ–≥–æ: {total_users}\n"
        f"–ê–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—ã: {admin_users}\n"
        f"–ò—Å–ø–æ–ª–Ω–∏—Ç–µ–ª–∏: {executor_users}\n"
        f"<b>–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –ø–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è–º:</b>"
    )
    users = db.get_all_users()
    if users:
        keyboard = InlineKeyboardMarkup(inline_keyboard=[
            [InlineKeyboardButton(text=f"{user['username']}", callback_data=f"user_stats:{user['user_id']}")] for user in users
        ])
        await callback_query.message.edit_text(response, parse_mode="HTML", reply_markup=keyboard) # –ò—Å–ø–æ–ª—å–∑—É–µ–º edit_text
    else:
        await callback_query.message.edit_text(response + "\n–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏ –Ω–µ –Ω–∞–π–¥–µ–Ω—ã.", parse_mode="HTML") # –ò—Å–ø–æ–ª—å–∑—É–µ–º edit_text
    await callback_query.answer()

#–î–æ–±–∞–≤–∏–º –∫–Ω–æ–ø–∫—É –¥–ª—è –ø—Ä–æ—Å–º–æ—Ç—Ä–∞ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –≤ user_info_handler
@router.callback_query(F.data.startswith("user_info:")) # –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–ª—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ
async def user_info_handler(callback_query: CallbackQuery, db: Database):
    user_id = callback_query.data.split(":")[1]
    user = db.get_user_by_id(user_id)
    if user:
        keyboard = role_selection_keyboard(user_id)
        keyboard.inline_keyboard.append([InlineKeyboardButton(text="–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è", callback_data=f"user_stats:{user_id}")])
        await callback_query.message.edit_text(f"–ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ:\n{user['username']} : {user['role']}", reply_markup=keyboard)
    else:
        await callback_query.message.edit_text("–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω.")
